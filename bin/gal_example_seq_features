#!/usr/bin/perl

use strict;
use warnings;
use Getopt::Long;
use GAL::Annotation;

#-----------------------------------------------------------------------------
#----------------------------------- MAIN ------------------------------------
#-----------------------------------------------------------------------------

my $usage = "

Synopsis:

gal_example_seq_features --fasta path/to/fasta --features feature.gff3

Description:

This is an example script for using the GAL library for working
with sequence features in GAL.

Options:

  --fasta, -a genome.fa

      A path to the fasta files associated with the give features
      (Required).

  --features, -f genes.gff3

      The GFF3 file (or database) of sequence features (Required).

";

my ($help, $fasta, $feature_db);

my $opt_success = GetOptions('help|h'            => \$help,
			     'fasta|a=s'       => \$fasta,
			     'features|f=s'    => \$feature_db,
			      );

die $usage if $help || ! $opt_success;

# This will ultimately be moved inside the storage
# code so it's all hidden
my $text_file;
if (-T $feature_db) {
  $text_file = $feature_db;
  $feature_db =~ s/\.(gff3?|gvf)$//;
  $feature_db .= '.sqlite';
  # If DB is newer than text file
  if ((stat($feature_db))[9] > (stat($text_file))[9]) {
    $text_file = undef;
  }
}

# Making a hash of the arguments for the features
my %feat_store_args = (class    => 'SQLite',
		       database => $feature_db
		      );

# Lazy connect to the database for the features
my $feat_store = GAL::Annotation->new(storage => \%feat_store_args,
				      fasta   => $fasta,
				     );

# Load files to DB if given as a text file.
if ($text_file) {
  $feat_store->parser(class => 'gff3');
  $feat_store->load_files(files => $text_file);
}

# Get a resultset.
my $features = $feat_store->schema->resultset('Feature');

# Define the search
my %feature_where = (type => 'mRNA');

# Do the search and get an interator for all matching features
my $mrnas = $features->search(\%feature_where);

# Iterate over the features
while (my $mrna = $mrnas->next) {
  # Get the feature ID
  my $mrna_id = $mrna->feature_id;
  # Get all the exons for this mRNA
  my $exons = $mrna->exons;
  my $e_count = $exons->count;
  my ($e_length, $e_gc);
  # Iterate over each exon
  while (my $exon = $exons->next) {
    $e_length += $exon->length;
    $e_gc     += $exon->gc_content;
  }
  print join "\t", int($e_length/$e_count), $e_gc/$e_count;
  print "\n";
  # Introns don't exist in the dataset, so GAL
  # will infer them on the fly.
  my $introns = $mrna->introns;
  my $i_count = $introns->count;
  my ($i_length, $i_gc);
  while (my $intron = $introns->next) {
    $i_length += $intron->length;
    $i_gc     += $intron->gc_content;
  }
  print $i_length ? join("\t", int($i_length/$i_count), '', $i_gc/$i_count) : "\t\t";
  print "\n";
  print '';
}
