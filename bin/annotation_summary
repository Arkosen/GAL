#!/usr/bin/perl

use strict;
use warnings;
use Getopt::Long;
use GAL::Annotation;

#-----------------------------------------------------------------------------
#----------------------------------- MAIN ------------------------------------
#-----------------------------------------------------------------------------

my $usage = "

Synopsis:

annotation_summary feature.gff3 genome.fasta

Description:

This script will summarize the annotations in GFF3 file.

";

my ($help);

my $opt_success = GetOptions('help|h' => \$help,
			      );

if (! $opt_success) {
    print STDERR join ' : ', ('FATAL',
                              'command_line_parse_error',
                              'Use gff_tool --help to see correct usage');
}

if ($help) {
 print $usage;
 exit(0);
}

my ($feature_file, $fasta_file) = @ARGV;

my $annotation = GAL::Annotation->new($feature_file,
				      $fasta_file);

my $features = $annotation->features;


my %counts;
for my $column (qw(seqid source type strand phase)) {
  my $rs = $features->get_column($column);
  map {$counts{$column}{$_}++} $rs->all;
}

my %lengths;
map {push @{$lengths{$_->type}}, $_->length} $features->all;

my %gc_content;
while (my $feature = $features->next) {
  my $seq = $feature->seq;
  my $length = length($seq);
  my $gc_count = $seq =~ tr/GCgc/GCgc/;
  my $pct_gc = $gc_count / $length;
  push @{$gc_content{$feature->type}}, $pct_gc;
}

my %children;


print '';

# Do the search and get an interator for all matching features
my $mrnas = $features->search({type => 'mRNA'});

# Iterate over the features
while (my $mrna = $mrnas->next) {
  # Get the feature ID
  my $mrna_id = $mrna->feature_id;
  # Get all the exons for this mRNA
  my $exons = $mrna->exons;
  my $e_count = $exons->count;
  my ($e_length, $e_gc);
  # Iterate over each exon
  while (my $exon = $exons->next) {
    $e_length += $exon->length;
    $e_gc     += $exon->gc_content;
  }
  print join "\t", int($e_length/$e_count), $e_gc/$e_count;
  print "\n";
  # Introns don't exist in the dataset, so GAL
  # will infer them on the fly.
  my $introns = $mrna->introns;
  my $i_count = $introns->count;
  my ($i_length, $i_gc);
  while (my $intron = $introns->next) {
    $i_length += $intron->length;
    $i_gc     += $intron->gc_content;
  }
  print $i_length ? join("\t", int($i_length/$i_count), '',
			 $i_gc/$i_count) : "\t\t";
  print "\n";
}
