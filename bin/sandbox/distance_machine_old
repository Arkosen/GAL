#!/usr/bin/perl -w 
use strict;
use warnings;
use FileHandle;
use Getopt::Long;
use PostData;
$| = 1;
#-----------------------------------------------------------------------------
#----------------------------------- MAIN ------------------------------------
#-----------------------------------------------------------------------------
my $usage = "

Synopsis:

distance_machine  <gff3 file> <gff3 file> 

Description: gets distance between files. outputs a phylip distance matrix

OPTIONS:

--help 
--segment_size
--chr : restrict the analysis to a single chromosome.
EXAMPLE:

";


my ($help, $chr, $segment_size);
my $opt_success = GetOptions('help'           => \$help,
			     'chr=s'          => \$chr,
			     'segment_size=s' => \$segment_size,
			     );

die $usage if $help || ! $opt_success;

die $usage unless -e $ARGV[1];


my %LOGICAL;
my $i = 0;
foreach my $file (@ARGV){
	parse_file($file, $i);
	$i++;
}

my $matrix = get_matrix();
#--------------------------------------------------------------------------------
#---------------------------------------- SUBS ----------------------------------
#--------------------------------------------------------------------------------
sub parse_file {

	my $file = shift;
	my $num  = shift;

	my $fh = new FileHandle();
	   $fh->open($file);

	while (defined(my $line = <$fh>)){
		chomp($line);

		next if $line =~ /^#/;

		next if defined($chr) && $line !~ /^chr$chr/;

		my @fields = split(/\t/, $line);

		my $b = $fields[3];
		my $e = $fields[4];


		load_logical($b, $e, $num) if $b =~ /\d+/ && $e =~ /\d+/;
	}
	$fh->close();	

}
#--------------------------------------------------------------------------------
sub load_logical {
	my $b = shift;
	my $e = shift;
	my $i = shift;
	
	my $b_mod = int($b/$segment_size);
	my $e_mod = int($e/$segment_size);

	if ($b_mod == $e_mod){
		push(@{$LOGICAL{$i}{$chr}{$b_mod}}, [$b, $e]);
	}
	else {
               my $e_new = ($b_mod + 1)*$segment_size;
               my $b_new = $e_mod*$segment_size;
               push(@{$LOGICAL{$i}{$chr}{$b_mod}}, [$b, $e_new]);
               push(@{$LOGICAL{$i}{$chr}{$e_mod}}, [$b_new, $e]);
	}
}
#-------------------------------------------------------------------------------
sub get_matrix {

	my %matrix;
	foreach my $i (keys %LOGICAL){
		foreach my $j (keys %LOGICAL){
			if ($i == $j){
				$matrix{$i}{$j} = 0;
			}
			else {
				get_distance($i, $j);
			}
		}
	}
	PostData(\%matrix);

}
#-------------------------------------------------------------------------------
sub get_distance {
	my $i = shift;
	my $j = shift;

	foreach my $chr_i (keys %{$LOGICAL{$i}}){
		foreach my $chr_j (keys %{$LOGICAL{$j}}){
			calc_distance($i, $j, $chr_i, $chr_j)
			if $chr_i eq $chr_j;
		}
	}
}
#-------------------------------------------------------------------------------
sub calc_distance {
	my $i     = shift;
	my $j     = shift;
	my $chr_i = shift;
	my $chr_j = shift;

	my @i_mods = keys %{$LOGICAL{$i}{$chr_i}};

	my %stuff;
	foreach my $mod (@i_mods){
		my @coor_sets_i = $LOGICAL{$i}{$chr_i}{$mod};
		my @coor_sets_j = $LOGICAL{$j}{$chr_j}{$mod};

		$stuff{$mod}{i} = \@coor_sets_i;
		
		if (defined($coor_sets_j[0])) {
			$stuff{$mod}{j} = \@coor_sets_j;	
		}
		else {
			$stuff{$mod}{j} = undef;
		}

	}

        my @j_mods = keys %{$LOGICAL{$j}{$chr_j}};

        foreach my $mod (@j_mods){
                my @coor_sets_i = $LOGICAL{$i}{$chr_i}{$mod};
                my @coor_sets_j = $LOGICAL{$j}{$chr_j}{$mod};

                $stuff{$mod}{j} = \@coor_sets_j;

                if (defined($coor_sets_i[0])) {
                        $stuff{$mod}{i} = \@coor_sets_i;
                }
                else {
                        $stuff{$mod}{i} = undef;
                }

        }

	my %total_distance;

	$total_distance{$i}{$j}{$chr_i} += string_it(\%stuff);
}
#-------------------------------------------------------------------------------
sub string_it {
	my $stuff = shift;

	my $i_str = '0'x $segment_size;
	my $j_str = '0'x $segment_size;

	foreach my $mod (keys %{$stuff}){
		my 	
	}
}
#-------------------------------------------------------------------------------






