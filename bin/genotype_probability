#!/usr/bin/perl
use strict;
use warnings;
use Getopt::Long;
use PostData;
use GAL::Parser;
use GAL::het_homo_or_repeat;

$| = 1;

#-----------------------------------------------------------------------------
#----------------------------------- MAIN ------------------------------------
#-----------------------------------------------------------------------------
my $usage = "

Synopsis:

genotype_probability --error_rate <flot> <feature2gff.out>

Description:

Takes a gff3 file produced by GAL/feature2gff and adds
a unique_mapping_probability tag to it.

OPTIONS:

--help
--format
--error_rate <average error rate per base pair>

EXAMPLE:

genotype_probability --format solid --error_rate 5e-4 feature2gff.out

";


my ($help, $error_rate, $format);
my $opt_success = GetOptions('help'         => \$help,
			     'format=s'       => \$format,
			     'error_rate=s' => \$error_rate,
			      );

die $usage if $help || ! $opt_success;

my $file = shift;
die $usage unless -e $file;

my $parser = GAL::Parser->new(file => $file);

while (my $feature = $parser->parse_next_feature) {


	my @total_reads = $feature->get_attribute_values('total_reads');
	my @ref_allele  = $feature->get_attribute_values('reference_allele');
	my @var_allele  = $feature->get_attribute_values('variant_allele');

	my @ref_reads  = $feature->get_attribute_values('reference_reads');
	my @var_reads  = $feature->get_attribute_values('variant_reads');

	my @genotype  = $feature->get_attribute_values('genotype');

	my ($best_model, $best_geno, $p_het, $p_homo)  =
	    get_genotype_probability($format,
				     $error_rate,
				     $genotype[0],
				     $total_reads[0],
				     \@ref_allele,
				     \@var_allele,
				     \@ref_reads,
				     \@var_reads,
				     );


	my $post_p;
	my $sum = $p_het + $p_homo;
	if    ($best_model eq 'HOMO'){
		$post_p = $p_homo/$sum;
	}
	elsif ($best_model eq 'HET'){
		$post_p = $p_het/$sum;
	}
	else {
		$post_p = 'NED';
	}

	 $feature->{attributes}{genotype_probability} = [$post_p];
	print $feature->to_gff3();
	print "\n";
	#print "BEST_MODEL$best_model GENO:$best_geno P_HET:$p_het P_HOME:$p_homo POST_P:$post_p\n";

}
#------------------------------------------------------------------------------------
#--------------------------------- SUBS ---------------------------------------------
#------------------------------------------------------------------------------------
sub get_genotype_probability {
	my $format       = shift;
	my $error_rate   = shift;
	my $genotype     = shift;
	my $tot_reads    = shift;
	my $ref_alleles  = shift;
	my $var_alleles  = shift;
	my $ref_reads    = shift;
	my $var_reads    = shift;

	my ($best_model, $geno, $p_het, $p_homo) = get_counts($format,
							      $error_rate,
							      $genotype,
							      $tot_reads,
							      $ref_alleles,
							      $var_alleles,
							      $ref_reads,
							      $var_reads,
							     );


	return ($best_model, $geno, $p_het, $p_homo);

}
#------------------------------------------------------------------------------------
sub get_counts {
	my $format       = shift;
	my $error_rate   = shift;
	my $genotype     = shift;
	my $tot_reads    = shift;
	my $ref_alleles  = shift;
	my $var_alleles  = shift;
	my $ref_reads    = shift;
	my $var_reads    = shift;


	my ($best_model, $geno, $p_het, $p_homo);

	if    ($format eq 'solid'){

		($best_model, $geno, $p_het, $p_homo) =
		do_it_solid($error_rate, $genotype, $tot_reads, $ref_alleles, $var_alleles);
	}
	elsif ($format eq 'illumina_sanger'){
		($best_model, $geno, $p_het, $p_homo) =
		do_it_illumina_sanger($error_rate, $genotype, $tot_reads, $ref_alleles, $var_alleles);

	}
	elsif ($format eq 'watson_snp'){
		($best_model, $geno, $p_het, $p_homo) =
		do_it_watson_snp($error_rate, $genotype, $tot_reads, $ref_reads, $var_reads);

	}
	else {
		die "unknown format:$format in sub get_counts!\n";
	}

	return ($best_model, $geno, $p_het, $p_homo);
}
#------------------------------------------------------------------------------------
sub do_it_watson_snp {

	my $error_rate = shift;
	my $geno       = shift;
	my $tot_reads  = shift;
	my $refs       = shift;
	my $vars       = shift;


	my %read_counts;
	foreach my $r (@{$refs}){
		my ($base, $counts) = $r =~ /([A-Z])\:(\d+)/;
		$read_counts{ref}{$base} = $counts;
	}

	foreach my $v (@{$vars}){
		my ($base, $counts) = $v =~ /([A-Z])\:(\d+)/;
		$read_counts{var}{$base} = $counts;
	}


	my @bases_ref = keys %{$read_counts{ref}};
	my @bases_var = keys %{$read_counts{var}};

	my $num_ref =  @bases_ref;
	my $num_var =  @bases_var;

	#PostData(\%read_counts);

	my ($c_x, $b_x, $c_y, $b_y);

	my $p_het;
	my $p_homo;
	if ($geno eq 'heterozygous' && $num_ref == 1 && $num_var == 1){

		$c_y = $read_counts{var}{$bases_var[0]};
		$b_y = $bases_var[0];
		$b_x = $bases_ref[0];;
		$c_x = $read_counts{ref}{$bases_ref[0]};;

		($c_x, $b_x, $c_y, $b_y) =
		GAL::het_homo_or_repeat::prep_and_scale($c_x, $b_x, $c_y, $b_y);
	}
	elsif ($geno eq 'homozygous_variant'){
		$c_y = $tot_reads;
		$b_y = $vars->[0];
		$b_x = $refs->[0];
		$c_x = 0;

		($c_x, $b_x, $c_y, $b_y) =
		GAL::het_homo_or_repeat::prep_and_scale($c_x, $b_x, $c_y, $b_y);
	}
	elsif ($geno eq 'trans_heterozygous'){
		$c_y = $read_counts{var}{$bases_var[0]};
		$b_y = $bases_var[0];
		$b_x = $bases_var[1];
		$c_x = $read_counts{var}{$bases_var[1]};

		($c_x, $b_x, $c_y, $b_y) =
		GAL::het_homo_or_repeat::prep_and_scale($c_x, $b_x, $c_y, $b_y);
	}

	else {
		PostData($vars);

		#PostData(\%read_counts);

		die "unknown genotype:$geno  in sub do_it_watson_snp!\n";
	}

	$p_het  = GAL::het_homo_or_repeat::het($c_x, $c_y, $error_rate);

	$p_homo = GAL::het_homo_or_repeat::homo($c_x, $c_y, $error_rate);

	my ($best_model, $best_geno) =
	GAL::het_homo_or_repeat::best_model_and_geno($c_x,
						     $b_x,
						     $c_y,
						     $b_y,
						     $p_het,
						     $p_homo,
						     );

	return ($best_model, $best_geno, $p_het, $p_homo);
}
#------------------------------------------------------------------------------------
sub do_it_illumina_sanger {

	my $error_rate = shift;
	my $geno       = shift;
	my $tot_reads  = shift;
	my $refs       = shift;
	my $vars       = shift;

	my ($c_x, $b_x, $c_y, $b_y);

	my $p_het;
	my $p_homo;
	if ($geno eq 'heterozygous:reference'){
		$c_y = int $tot_reads/2;
		$b_y = $vars->[1];
		$b_x = $vars->[0];
		$c_x = int $tot_reads/2;

		($c_x, $b_x, $c_y, $b_y) =
		GAL::het_homo_or_repeat::prep_and_scale($c_x, $b_x, $c_y, $b_y);
	}
	elsif ($geno eq 'homozygous:variant'){
		$c_y = $tot_reads;
		$b_y = $vars->[0];
		$b_x = $refs->[0];
		$c_x = 0;

		($c_x, $b_x, $c_y, $b_y) =
		GAL::het_homo_or_repeat::prep_and_scale($c_x, $b_x, $c_y, $b_y);
	}
	elsif ($geno eq 'heterozygous:variant'){
		$c_y = $tot_reads;
		$b_y = $vars->[0];
		$b_x = $refs->[0];
		$c_x = 0;

		($c_x, $b_x, $c_y, $b_y) =
		GAL::het_homo_or_repeat::prep_and_scale($c_x, $b_x, $c_y, $b_y);
	}

	else {
		die "unknown genotype:$geno  in sub do_it_illumina_sanger!\n";
	}

	$p_het  = GAL::het_homo_or_repeat::het($c_x, $c_y, $error_rate);

	$p_homo = GAL::het_homo_or_repeat::homo($c_x, $c_y, $error_rate);

	my ($best_model, $best_geno) =
	GAL::het_homo_or_repeat::best_model_and_geno($c_x,
						     $b_x,
						     $c_y,
						     $b_y,
						     $p_het,
						     $p_homo,
						     );

	return ($best_model, $best_geno, $p_het, $p_homo);
}
#------------------------------------------------------------------------------------
sub do_it_solid {
	my $error_rate = shift;
	my $geno       = shift;
	my $tot_reads  = shift;
	my $refs       = shift;
	my $vars       = shift;

	my ($c_x, $b_x, $c_y, $b_y);

	my $p_het;
	my $p_homo;
	if ($geno eq 'heterozygous:reference'){
		$c_y = int $tot_reads/2;
		$b_y = $vars->[1];
		$b_x = $vars->[0];
		$c_x = int $tot_reads/2;

		($c_x, $b_x, $c_y, $b_y) =
		GAL::het_homo_or_repeat::prep_and_scale($c_x, $b_x, $c_y, $b_y);
	}
	elsif ($geno eq 'homozygous:variant'){
		$c_y = $tot_reads;
		$b_y = $vars->[0];
		$b_x = $refs->[0];
		$c_x = 0;

		($c_x, $b_x, $c_y, $b_y) =
		GAL::het_homo_or_repeat::prep_and_scale($c_x, $b_x, $c_y, $b_y);
	}
	elsif ($geno eq 'heterozygous:variant'){
		$c_y = $tot_reads;
		$b_y = $vars->[0];
		$b_x = $refs->[0];
		$c_x = 0;

		($c_x, $b_x, $c_y, $b_y) =
		GAL::het_homo_or_repeat::prep_and_scale($c_x, $b_x, $c_y, $b_y);
	}

	else {
		die "unknown genotype:$geno  in sub do_it_solid!\n";
	}

	$p_het  = GAL::het_homo_or_repeat::het($c_x, $c_y, $error_rate);

	$p_homo = GAL::het_homo_or_repeat::homo($c_x, $c_y, $error_rate);

	my ($best_model, $best_geno) =
	GAL::het_homo_or_repeat::best_model_and_geno($c_x,
						     $b_x,
						     $c_y,
						     $b_y,
						     $p_het,
						     $p_homo,
						     );

	return ($best_model, $best_geno, $p_het, $p_homo);
}
#------------------------------------------------------------------------------------
