#!/usr/bin/perl

use strict;
use warnings;

use FileHandle;
use Getopt::Long;

#-----------------------------------------------------------------------------
#----------------------------------- MAIN ------------------------------------
#-----------------------------------------------------------------------------

my $usage = "

Synopsis:

distance_machine  --chr 1 variant_1.gvf variant_2.gvf

Description: Get the distance between two GVF (GFF3) files

OPTIONS:

--help    Print this help message.
--chr     Restrict the analysis to a single chromosome.
--metric  Specify which distance metric (as integer described below) to use.

Distance Metrics:

Let i be all of the SNV locations in genome i.
Let j be all of the SNV locations in genome j.

Ci = i-j # SNVs unique to i (complement)
Cj = j-i # SNVs unique to j (complement)
Cm = max{Ci,Cj} # maximum of Ci, Cj

I = i âˆ© j # Intersection of i, j

Metric 1:
    Ns = Cm + I
    d  = Cm / Ns

Metric 2:
    d = (Ci + Cj)/(Ci + Cj + I)

";


my ($help, $chr, $metric);

my $opt_success = GetOptions('help|h'     => \$help,
			     'chr|c=s'    => \$chr,
			     'metric|m=i' => \$metric,  
			     );

die $usage if $help || ! $opt_success;

$metric ||= 2;

my @files = @ARGV;

my $sets     = parse_data(@files);
my $distance = get_distance($sets, $metric);

print <<END_DOC;
	 2
0          0          $distance
1          $distance          0
END_DOC

print "\n";

#--------------------------------------------------------------------------------
#---------------------------------------- SUBS ----------------------------------
#--------------------------------------------------------------------------------
#--------------------------------------------------------------------------------
sub parse_data {

    my @files = @_;

    my @sets;
    for my $file (@files) {

	my $IN;
	if ($chr) {
	    open ($IN, '-|', "grep -P $chr $file") or
		die "Can't open pipe from $file for reading\n";
	}
	else {
	    open ($IN, '<', $file) or die "Can't open $file for reading\n";
	}
	print STDERR "INFO : processing_file : $file\n";

	my %set;
	while (my $line = <$IN>) {
	    next if $line =~ /^\#/;
	    next if $line =~ /^\s*$/;
	    chomp $line;

	    my ($seqid, $source, $type, $start, $end) = split(/\t/, $line);

	    warn "Error : bad_line : $line\n" unless ($start =~ /\d+/ &&
						      $end   =~ /\d+/);

	    my $location = join ':', ($seqid, $start, $end);
	    $set{$location}++;
	}
	push @sets, \%set;
	close $IN;
    }
    return \@sets;
}

#-------------------------------------------------------------------------------

sub get_distance {

    my ($sets, $metric) = @_;

    my ($set_i, $set_j) = @{$sets};

    # my $comp_j = $set_i->diff($set_j) || (); # Compliment of set i
    # my $comp_i = $set_j->diff($set_i) || (); # Compliment of set j
    
    my ($comp_i, $comp_j);
    map {$comp_i++ unless $set_j->{$_}} keys %{$set_i};
    map {$comp_j++ unless $set_i->{$_}} keys %{$set_j};


    my $comp_m = $comp_i > $comp_j ? $comp_i : $comp_j; # Maximum compliment
    my $intersection;
    map {$intersection++ if $set_j->{$_}} keys %{$set_i};

    my $distance;
    if ($metric == 2) {
	$distance = ($comp_i + $comp_j) / ($comp_i + $comp_j + $intersection);
    }
    else {
	$distance = ($comp_m)/($comp_m + $intersection);
    }
    $distance = sprintf("%.4f", $distance);
    print STDERR "D:$distance\n";
    return $distance;
}
#-----------------------------------------------------------------------------

