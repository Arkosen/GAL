#!/usr/bin/perl -w 

use strict;
use warnings;

use lib '/Users/myandell/lib';

use FileHandle;
use Getopt::Long;
use PostData;
$| = 1;
#-----------------------------------------------------------------------------
#----------------------------------- MAIN ------------------------------------
#-----------------------------------------------------------------------------
my $usage = "

Synopsis:

distance_machine_omim  <gff3 file> <gff3 file> 

Description: gets list of allels common to OMIM. 

OPTIONS:

--help 
--chr : restrict the analysis to a single chromosome.
EXAMPLE:

";


my ($help, $chr, $segment_size);
my $opt_success = GetOptions('help'           => \$help,
			     'chr=s'          => \$chr,
			     );

die $usage if $help || ! $opt_success;

#die $usage unless -e $ARGV[1];


my %DATA;
my $BIGGEST_OFFSET = 0;


my $files = get_files();
my $omim_file = shift(@{$files});

my $omim_coors = parse_omim_file($omim_file);

foreach my $file (@{$files}){
	spew($omim_coors, $file);
} 

#--------------------------------------------------------------------------------
#---------------------------------------- SUBS ----------------------------------
#--------------------------------------------------------------------------------
sub get_files {
	my $dir = 
	'/Users/myandell/Omicia/gff3_standardization_project/Standardized_GFF/';

	my @files;



	push(@files, $dir.'omim_variants_v2.gff.fixed');
	push(@files, $dir. 'UPN_807970.gvf');
=cut;
        push(@files, $dir.'ut_NA19240_snp.gff3');
        push(@files, $dir.'ut_NA18507_Illumina_snp.gff3');
        push(@files, $dir.'ut_NA18507_SOLiD_snp.gff3');
        push(@files, $dir.'ut_chinese_snp.gff3');
        push(@files, $dir.'ut_korean_snp.gff3');
        push(@files, $dir.'ut_venter_snp.gff3.fixed');
        push(@files, $dir.'watson.snp.uniq.genotype.gvf');
        push(@files, $dir.'ut_NA07022_snp.gff3.fixed');
        push(@files, $dir.'ut_NA12878_snp.gff3');
        push(@files, $dir.'ut_quake_snp.gff3.fixed');
=cut;
	return \@files;
}
#--------------------------------------------------------------------------------
sub spew {
	my $omim_data = shift;
	my $file      = shift;


	my $out_file = $file.'.omim_subset';

        my $fh = new FileHandle();
           $fh->open($file);

	my $OUT = new FileHandle;
	   $OUT->open("> $out_file");

	print STDERR "now spewing $out_file\n";

        my %omim_data;
        while (defined(my $line = <$fh>)){
                chomp($line);

                next if $line =~ /^#/;

                my @fields = split(/\t/, $line);

                my $chr = $fields[0];

                my $b = $fields[3];
                my $e = $fields[4];


		my $var;

		my ($ref) = $fields[8] =~ /.*Reference_seq\=([ACGTN])\;.*/;

		if ($fields[8] =~ /Genotype\=homozygous/){
			($var) = $fields[8] =~ /.*Variant_seq\=([ACGTN])\;.*/;	


		}
		elsif ($fields[8] =~ /Genotype\=heterozygous/){
			my ($a, $b) = $fields[8] =~ /.*Variant_seq\=([ACGTN])\,([ACGTN])\;.*/;   

			$var = $a eq $ref ? $b : $a;
		}

		my $o_var;
		my $o_ref;


		next unless $omim_data->{coors}->{$chr.$b.$e};


		$o_var = $omim_data->{var}->{$chr.$b.$e};
		$o_ref = $omim_data->{ref}->{$chr.$b.$e};


		if ($var ne $ref && $o_var ne $ref){
			print $OUT $line." o_var=$o_var o_ref=$o_ref DIFF\n";
		}
		elsif ($o_var eq $ref){

			print $OUT $line." o_var=$o_var o_ref=$o_ref SAME\n"; 
		}
		else {
			print $OUT $line." o_var=$o_var o_ref=$o_ref FLAG\n";
		}
        }
	$OUT->close;

        $fh->close();


}
#--------------------------------------------------------------------------------
sub parse_omim_file {

	my $file = shift;

	my $fh = new FileHandle();
	   $fh->open($file);

	my %omim_data;
	while (defined(my $line = <$fh>)){
		chomp($line);

		next if $line =~ /^#/;

		my @fields = split(/\t/, $line);


		my ($ref, $var) = $fields[8] =~ /.*nucleotide_variant\=\"([AGCTN])\/([ACGTN])\"/;

		my $chr = $fields[0];

		my $b = $fields[3];
		my $e = $fields[4];


		if ($b =~ /\d+/ && $e =~ /\d+/){
			$omim_data{coors}{$chr.$b.$e}++;
			$omim_data{var}{$chr.$b.$e} = $var;
			$omim_data{ref}{$chr.$b.$e} = $ref;
		}
	}
	$fh->close();	

	return \%omim_data;
}
#--------------------------------------------------------------------------------





