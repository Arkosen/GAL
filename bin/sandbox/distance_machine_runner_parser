#!/usr/bin/perl -w 
use strict;
use lib '/Users/myandell/lib';
use warnings;
use FileHandle;
use PostData;
use Getopt::Std;
use vars qw($opt_l $opt_d $opt_c);
getopts('l:d:c:'); 

$| = 1;


my $usage = "

\n\n

distance_machine_runner_parser: constructs matrices for a distance_machine_runner run.

OPTIONS: -l <path to list of GVF files used for distance_machine_runner> 
	    Single column file of all genomes you want in tree.
         -d < directory where distance_machine_runner matrix files lie>
	 -c <\\d, each, all>

         distance_machine_runner_parser -l list_file -d ./distances/test/ -c 22 
 
\n\n";
#--------------------------------------------------------------------------------
#-------------------------------------- MAIN ------------------------------------
#--------------------------------------------------------------------------------


die $usage unless args_okay();

my $files = parse_list_file($opt_l);

my %DATA_MATRIX;
my %NAME_LOOKUP;

for (my $i = 0; $i < @{$files} - 1 ; $i++){
	for (my $j = $i + 1; $j < @{$files}; $j++){
		my $i_file = $files->[$i];
		my $j_file = $files->[$j];

		my ($i_name) = $i_file =~ /\/?([^\/]+)$/;
		my ($j_name) = $j_file =~ /\/?([^\/]+)$/;

		die "i_name not defined!\n" unless $i_name;
		die "j_name not defined!\n" unless $j_name;

        	if    ($opt_c eq 'all'){
                	process_pair('all', $i_name, $j_name);

        	}
        	elsif ($opt_c eq 'each'){
                	for (my $c = 1; $c < 23; $c++){
                        	process_pair($c, $i_name, $j_name);
                	}
        	}
        	elsif ($opt_c =~ /\d+/){ 
	               	process_pair($opt_c, $i_name, $j_name);
        	}

	}
}
load_name_lookup();
print_matrix();
print_key();
#--------------------------------------------------------------------------------
#---------------------------------------- SUBS ----------------------------------
#--------------------------------------------------------------------------------
sub print_key {

	print "##---------- KEY ---------------\n";

	my @chrs = keys %NAME_LOOKUP;
	my $chr = $chrs[0];

	foreach my $key (sort {$NAME_LOOKUP{$chr}{$a} <=> $NAME_LOOKUP{$chr}{$b}} keys %{$NAME_LOOKUP{$chr}}){
		print '## '.$NAME_LOOKUP{$chr}{$key}."\t".$key."\n";
	}
}
#--------------------------------------------------------------------------------
sub print_matrix {

        my $c = 8;
        my $c_s = " "x 2;

	foreach my $chr (sort keys %DATA_MATRIX){
		my $keys = keys %{$DATA_MATRIX{$chr}};
		print "         $keys\n";
        	foreach my $i (sort keys %{$DATA_MATRIX{$chr}}){
                	my @data;
                	foreach my $j (sort keys %{$DATA_MATRIX{$chr}}){
                        	my $sij = substr($DATA_MATRIX{$chr}{$i}{$j}, 0, $c-2);
                        	my $l = $c - length($sij);
                        	my $spacer = " "x $l;
                        	my $string = $spacer."       ".$sij;
                        	push(@data, $string);
                	}
                	print $NAME_LOOKUP{$chr}{$i}." ".join(" ", @data)."\n";
        	}
	}
}
#--------------------------------------------------------------------------------
sub load_name_lookup {

	foreach my $chr (keys %DATA_MATRIX){
		my @keys = sort {$a cmp $b} keys %{$DATA_MATRIX{$chr}};

		for (my $i = 0; $i < @keys; $i++){
			$NAME_LOOKUP{$chr}{$keys[$i]} = $i;
		}
	}
}
#--------------------------------------------------------------------------------
sub process_pair {
	my $c      = shift;
	my $i_name = shift;
	my $j_name = shift;

	my $matrix_file = get_matrix_file($c, $i_name, $j_name);	

	my $fh = new FileHandle();
	   $fh->open($matrix_file);

	<$fh>;
	my $line = <$fh>;
	my @fields = split(/\s+/, $line);

	die "matrix_file:$matrix_file is corrupt line:$line\n" unless $#fields == 2;

	$fh->close();

	$DATA_MATRIX{$c}{$i_name}{$j_name} = $fields[2];
	$DATA_MATRIX{$c}{$j_name}{$i_name} = $fields[2];

	$DATA_MATRIX{$c}{$i_name}{$i_name} = 0;
	$DATA_MATRIX{$c}{$j_name}{$j_name} = 0;
}
#--------------------------------------------------------------------------------
sub get_matrix_file {
	my $c      = shift;
	my $i_name = shift;
	my $j_name = shift;

	my $a = $opt_d.'/'.'matrix.'.$i_name.'.VS.'.$j_name.'.'.$c;
	my $b = $opt_d.'/'.'matrix.'.$j_name.'.VS.'.$i_name.'.'.$c;

	my $target;

	if     (-e $a) {
		$target = $a;
	}
	elsif (-e $b) {
		$target = $b;
	}
	else {
		die "can\'t find a target file!\nNeither:\n $a \nNor:\n$b\nexist.\n";
		    
	}
	return $target;
}
#--------------------------------------------------------------------------------
sub parse_list_file {
	my $list_file = shift;

	my $fh = new FileHandle();
	   $fh->open($list_file);

	my @files;
	while (my $l = <$fh>){
		$l =~ s/\s+//g;
		chomp($l);

		die "can\'t find file:$l!\n" unless -e $l;

		push(@files, $l);
	}
	$fh->close();

	return \@files;
}

#--------------------------------------------------------------------------------
sub args_okay {

	return 0 unless $opt_d && $opt_l && $opt_c;

	return 1;

}
#--------------------------------------------------------------------------------





