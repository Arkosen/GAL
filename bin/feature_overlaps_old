#!/usr/bin/perl
use strict;
use warnings;
use DBI;
use Getopt::Long;
use GAL::Annotation;
use DBIx::Class::ResultClass::HashRefInflator;

#-----------------------------------------------------------------------------
#----------------------------------- MAIN ------------------------------------
#-----------------------------------------------------------------------------

my $usage = "

Synopsis:

feature_overlaps --feature_dsn 'dbi:mysql:feature_db' --feature_type 'SNP' \
		 --query_dsn   'dbi:mysql:feature_db'   --query_type 'CDS' \
		 --expanded --limit 10000 --offset 0

Description:

This script will take two GAL feature databases (They could be the
same database), iterate over all the features in feature_dsn and query
the query_dsn for overlapping features of type query_type.  The
feature_type and query_type arguments can be given multiple times to
include multiple features.  Leaving either blank will include all
features in that database.  Output is tab separated and comes in two
forms.  In the compact output every feature from feature_dsn is
printed once in the first column and all features from query_dsn are
printed space separated in the second column.  In the exapnded output
every freature from feature_dsn is printed in the first column and one
feature from query_dsn is printed in the second column.  There is a
separate row for every feature_dsn/query_dsn pair.  The compact output
is the default.


Options:

  feature_dsn:   The database source name of the database that contains
		 the features that will be iterated over.
  feature_type:  The type of feature that will be selected from feature_dsn.
		 Default is all types.
  query_dsn:     The database source name of the database that contains
		 the features that will be iterated over.
  query_type:    The type of feature that will be selected from query_dsn.
		 Default is all types.
  expanded:      Print output in expanded form.
  ids:           Print the IDs of all pair of overlapping features.
  user:          The user name of the database owner. [system username]
  password:      The password for the database (if the database is password
		 protected).
  offset         In the select statement for the feature database an offset
                 to begin from
  limit          In the select statement for the feature database an limit
                 on the number of records returned.


Notes:

  Compact (default) output example:
  SNP_ID_001    CDS exon mRNA start_codon
  SNP_ID_002    intron three_prime_cis_splice_site

  Expanded output example:
  YHSNP0128643    SNP     uc009viw.1:gene gene
  YHSNP0128643    SNP     uc009viw.1:mRNA ncRNA
  YHSNP0128643    SNP     uc009viw.1:exon:1       exon
  YHSNP0128643    SNP     NR_024540:mRNA:intron:10        intron
  YHSNP0128643    SNP     uc009viu.1:mRNA:intron:9        intron
  YHSNP0128643    SNP     uc009vis.1:mRNA:intron:3        intron

";

my ($help, $feature_dsn, @feature_types, $query_dsn, @query_types,
    $expanded, $ids, $user, $password, $offset, $limit);
my $opt_success = GetOptions('help'           => \$help,
			     'feature_dsn=s'  => \$feature_dsn,
			     'feature_type=s' => \@feature_types,
			     'query_dsn=s'    => \$query_dsn,
			     'query_type=s'   => \@query_types,
			     'expanded'       => \$expanded,
			     'user=s'         => \$user,
			     'password=s'     => \$password,
			     'ids'            => \$ids,
			     'offset=i'        => \$offset,
			     'limit=i'         => \$limit,
			    );

die $usage if $help || ! $opt_success;

die $usage unless ($feature_dsn && $query_dsn);

my $feature_schema = GAL::Annotation->new(dsn      => $feature_dsn,
					  user     => $user,
					  password => $password,
					 )->schema;

my $query_schema = GAL::Annotation->new(dsn      => $query_dsn,
					user     => $user,
					password => $password,
				       )->schema;

my $features = $feature_schema->resultset('Feature')->slice($offset, $offset + $limit);
$features->result_class('DBIx::Class::ResultClass::HashRefInflator');

my $query_where = 'seqid = ? AND ((start <= ? AND end >= ?) OR (start >= ? AND start <= ?))';


 FEATURE:
    while (my $feature = $features->next) {

	my @bind = (
		    $feature->{seqid},
		    $feature->{start},
		    $feature->{start},
		    $feature->{start},
		    $feature->{end},
		    );

	next if $feature->{type} eq 'contig';

	my $overlaps = $query_schema->resultset('Feature')->search_literal($query_where, @bind);
	$overlaps->result_class('DBIx::Class::ResultClass::HashRefInflator');

	print '# ' . $feature->{feature_id} . "\n";

	while (my $overlap = $overlaps->next ) {
		print join "\t", ($feature->{feature_id},
				  $feature->{type},
				  $overlap->{feature_id},
				  $overlap->{type},
				 );
		print "\n";
	}
}

#-----------------------------------------------------------------------------
#-------------------------------- SUBROUTINES --------------------------------
#-----------------------------------------------------------------------------
