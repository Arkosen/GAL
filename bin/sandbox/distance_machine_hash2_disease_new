#!/usr/bin/perl -w 
use strict;
use lib '/Users/myandell/lib';

use warnings;
use FileHandle;
use Getopt::Long;
use PostData;
$| = 1;
#-----------------------------------------------------------------------------
#----------------------------------- MAIN ------------------------------------
#-----------------------------------------------------------------------------
my $usage = "

Synopsis:

distance_machine  <gff3 file> <gff3 file> 

Description: gets distance between files. outputs a phylip distance matrix

OPTIONS:

--help 
--chr : restrict the analysis to a single chromosome.
EXAMPLE:

";


my ($help, $chr, $segment_size);
my $opt_success = GetOptions('help'           => \$help,
			     'chr=s'          => \$chr,
			     );

die $usage if $help || ! $opt_success;

#die $usage unless -e $ARGV[1];


my %DATA;
my $BIGGEST_OFFSET = 0;


my $files = get_files();

my $i = 0;
foreach my $file (@{$files}){
	print STDERR "Now Processing file($i):$file\n";
	parse_file($file, $i);
	$i++;
}

print STDERR "BIGGEST_OFFSET:$BIGGEST_OFFSET\n";

my $boot_lists = resample(100);

for (my $i = 0; $i < 100; $i++){
	my $matrix = get_matrix($boot_lists, $i);

	print_matrix($matrix);
}
exit(0);

#--------------------------------------------------------------------------------
#---------------------------------------- SUBS ----------------------------------
#--------------------------------------------------------------------------------
sub resample {
	my $n = shift;

	my @lists;
	foreach my $i (sort {$a <=> $b} keys %{$DATA{FILES}}){
	        while (my $coor = each %{$DATA{COORS}}){
			
                	push(@{$lists[$i]}, $coor) if defined($DATA{COORS}{$coor}{$i});

		}
        }

	my $boot_lists = sample(\@lists);

	return $boot_lists;
}
#--------------------------------------------------------------------------------
sub sample {
	my $lists = shift;

	my @boot_samples;
	my $i = 0;
	foreach my $l (@{$lists}){
		my $size = @{$l};
		
		for (my $j = 0; $j < 100; $j++){
        		my $total = 0;
        		while ($total < $size){
                		my $r = int rand($size);
                		push(@{$boot_samples[$i][$j]}, $l->[$r]);
                		$total++;
			}
		}

		$i++;
	}
	return \@boot_samples;
}
#--------------------------------------------------------------------------------
sub get_files {
	my $dir = 
	'/Users/myandell/Omicia/gff3_standardization_project/Standardized_GFF/omim_subsets/';

	my @files;

	push(@files, $dir.'ut_NA19240_snp.gff3.omim_subset');
	push(@files, $dir.'ut_NA18507_Illumina_snp.gff3.omim_subset');
	push(@files, $dir.'ut_NA18507_SOLiD_snp.gff3.omim_subset');
	push(@files, $dir.'ut_chinese_snp.gff3.omim_subset');
	push(@files, $dir.'ut_korean_snp.gff3.omim_subset');
	push(@files, $dir.'ut_venter_snp.gff3.fixed.omim_subset');
	push(@files, $dir.'watson.snp.uniq.genotype.gvf.omim_subset');
	push(@files, $dir.'ut_NA07022_snp.gff3.fixed.omim_subset');
	push(@files, $dir.'ut_NA12878_snp.gff3.omim_subset');
	push(@files, $dir.'ut_quake_snp.gff3.fixed.omim_subset');	
	push(@files, $dir.'UPN_807970.gvf.omim_subset');
	return \@files;
}
#--------------------------------------------------------------------------------
sub parse_file {

	my $file = shift;
	my $num  = shift;

	my $fh = new FileHandle();
	   $fh->open($file);

	$DATA{FILES}{$num}++;

	while (defined(my $line = <$fh>)){
		chomp($line);

		next if $line =~ /^#/;

		next if defined($chr) && $line !~ /^chr$chr\t/;

		my @fields = split(/\t/, $line);

		my $b = $fields[3];
		my $e = $fields[4];


		if ($b =~ /\d+/ && $e =~ /\d+/){
			$BIGGEST_OFFSET = $e if $e > $BIGGEST_OFFSET; 

			$DATA{COORS}{$fields[0].$b.'.'.$e}{$num}++;
		}
	}
	$fh->close();	

}
#--------------------------------------------------------------------------------
sub get_matrix {

	my $boot_lists = shift;
	my $boot_num   = shift;

	my %matrix;
	my %seen;
	
	for (my $i = 0; $i < @{$boot_lists} - 1; $i++){
		my @a = @{$boot_lists->[$i]->[$boot_num]};
		$matrix{$i}{$i} = 0;
		for (my $j = $i + 1; $j < @{$boot_lists}; $j++){
			$matrix{$j}{$j} = 0;
			my @b = @{$boot_lists->[$j]->[$boot_num]};
			my $d = get_distance(\@a, \@b);	
			$matrix{$i}{$j} = $d;
			$matrix{$j}{$i} = $d;
		}
	}

	return \%matrix;
}
#-------------------------------------------------------------------------------
sub get_distance {
	my $a = shift;
	my $b = shift;


	my %a_hash;
	my %b_hash;

	foreach my $i (@{$a}){
		$a_hash{$i}++;
	}
        foreach my $j (@{$b}){
                $b_hash{$j}++;
        }



	my %stuff;
	foreach my $i (keys %a_hash){

		if (defined($b_hash{$i})){
			$stuff{'11'}++; 
		}
		else {
			$stuff{'01'}++;
		}
	}

        foreach my $i (keys %b_hash){

                if (defined($a_hash{$i})){
                }
                else {
                        $stuff{'10'}++;
                }
        }

		
	my $Ns = $stuff{'10'};
	my $Nl = $stuff{'01'};



	($Ns, $Nl) = ($Nl, $Ns) if $Nl > $Ns;

	$Ns = $Ns + $stuff{'11'};

	my $intersection = $stuff{'11'};

	#PostData(\%stuff);

	print STDERR "intersection:$intersection\n";
	foreach my $k (keys %stuff){
		print STDERR "$k:".$stuff{$k}."\n";
	}
	my $d = ($Ns - $intersection)/$Ns;

	return $d;
} 
#-----------------------------------------------------------------------------
sub print_matrix {
        my $matrix = shift;


        my $c = 8;
        my $c_s = " "x 2;


        my $keys = keys %{$matrix};

        #print "        "." "x $c.join($c_s, (sort keys %{$matrix}))."\n";

        print "         $keys\n";

        foreach my $i (sort keys %{$matrix}){
                my @data;
                foreach my $j (sort keys %{$matrix->{$i}}){
                        my $sij = substr($matrix->{$i}->{$j}, 0, $c-2);
                        my $l = $c - length($sij);
                        my $spacer = " "x $l;
                        my $string = $spacer."       ".$sij;
                        push(@data, $string);
                }
                print $i." ".join(" ", @data)."\n";
        }


}
#-----------------------------------------------------------------------------

#-------------------------------------------------------------------------------






