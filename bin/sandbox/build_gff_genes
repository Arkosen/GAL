#!/usr/bin/perl
use strict;
use warnings;
use Getopt::Long;

#-----------------------------------------------------------------------------
#----------------------------------- MAIN ------------------------------------
#-----------------------------------------------------------------------------
my $usage = "

Synopsis:

build_gff_genes geneless.gff3 > gene_models.gff3

Description:

This script will take a GFF3 file that has ncRNA, mRNA and/or
transcript features as well as exon features (and other features with
Parent links to the transcripts) but is lacking genes and will create
genes based on single linkage clustering of the transcript as
determined by exon overalp.  That means that if any two exons overlap
between two transcripts then those transcripts will be assumed to
belong to the same gene, and a gene will be built to contain those
transcripts and child features

";


my ($help);
my $opt_success = GetOptions('help'    => \$help,
			      );

die $usage if $help || ! $opt_success;

my $file = shift;

die $usage unless $file;

my $features = parse_gff($file);
my ($transcripts, $other_features) =
  build_transcripts($features);
my $graph = {};
for my $seqid (sort keys %{$features}) {
    my $seqid_features = $features->{$seqid};
    for my $strand (sort keys %{$seqid_features}) {
	my $strand_features = $seqid_features->{$strand};
	build_graph($features, $graph);
    }
}
my $clusters = get_clusters($graph);
my $genes    = build_genes($features, $clusters);


foreach my $g_id (keys %{$genes}) {
    my $gene = $genes->{$g_id};
    print_feature($gene);
    foreach my $t_id (keys %{$gene->{transcripts}}) {
	my $transcript = $gene->{transcripts}{$t_id};
	print_feature($transcript);
	foreach my $type (keys %{$transcript->{features}}) {
	    foreach my $feature (@{$transcript->{features}{$type}}) {
		print_feature($feature);
	    }
	}
    }
}

#-----------------------------------------------------------------------------
#-------------------------------- SUBROUTINES --------------------------------
#-----------------------------------------------------------------------------

sub parse_gff {

    my $file = shift;

    open ( my $FH, '<', $file) or die "Could not open file: $file";

    my %features;
    while (my $line = <$FH>) {

	next if $line =~ /^\s*\#/;

	my ($seqid, $source, $type, $start, $stop, $score, $strand,
	    $phase, $attribute_text) = split  /\t/, $line;

	my $attributes = parse_attributes($attribute_text);

	my $feature_id = ref $attributes->{ID}     eq 'ARRAY' ?
	    $attributes->{ID}[0] : '';
	my $parent = ref $attributes->{Parent} eq 'ARRAY' ?
	    $attributes->{Parent}[0] : '';

	my $feature = {feature_id => $feature_id,
		       seqid  	  => $seqid,
		       source 	  => $source,
		       type   	  => $type,
		       start  	  => $start,
		       stop   	  => $stop,
		       score  	  => $score,
		       strand 	  => $strand,
		       phase  	  => $phase,
		       attributes => $attributes
		   };

	push @{$features{$type}}, $feature;

    }
    return \%features;
}
#-----------------------------------------------------------------------------

sub parse_attributes {

    my $text = shift;

    my @pairs = split /;/, $text;
    my %attributes;
    for my $pair (@pairs) {
	my ($key, $value) = split /=/, $value_text;
	my @values = split /,/, $value_text;
	for my $value (@values) {
	    push @{$attributes{$key}}, $value;
	}
    }
    return \%attributes;
}

#-----------------------------------------------------------------------------

sub build_transcripts {

  my $features = shift;

  my (%transcripts, %other_features);

  for my $type (qw(mRNA transcript ncRNA)) {
    for my $feature (@{$features->{$type}}) {
      my $feature_id = $feature->{feature_id};
      warn "Error : duplicate_transcript_id : $type, $feature_id\n"
	if exists $transcripts{$feature_id};
      $transcripts{$feature_id} = $feature;
    }
    delete $features->{$type};
  }

  for my $type (keys %{$features}) {
    my $feature_id = $feature->{feature_id};
    my $parents = ref $feature->{attributes}{Parent} eq 'ARRAY' ?
      $feature->{attributes}{Parent} eq 'ARRAY' : [];

  }

}

#-----------------------------------------------------------------------------
sub build_graph {
    
    my ($features, $graph) = @_;
    
    my @t_ids = sort {$feature->{$a}{start} <=> $feature->{b}{start}} keys %{$features};
    my $idx_pointer = 0;
    my ($t1_start_min, $t1_end_max) = $features;
  T1:
    for my $t1_idx (0 .. scalar @t_ids - 1) {
	my $t1     = $features->{$t_ids[$t1_idx]};
	$t1_start = $t1->{start};
	$t1_end   = $t1->{end};
	$t1_id    = $t1->{attributes}{ID}[0];
	    if ($t1_end_max < $t1_end) {
		$t1_max = $t1_end;
	    }
	if ($t1_start > $features{$t_ids[$idx_pointer]}) {
	    $idx_pointer = $t_idx;
	}
      T2:
	for my $t2_idx ($idx_pointer .. scalar @t_ids - 1) {
	    next T2 if $t1->{strand} ne $t2->{strand};
	    
	    my $t2 = $feature->{$t2_id};
	    my $t2_start = $t2->{start};
	    my $t2_end   = $t2->{end};
	    my $t2_id       = $t2->{attributes}{ID}[0];
	    last if $t2_start > $t1_end_max;
	  E1:
	    for my $exon_1 (@{$t1->{exon}}) {
	      E2:
		for my $exon_2 (@{$features->{$t2_id}{exon}}) {
		    if (overlaps($exon_1, $exon_2)) {
			$graph->{$t1_id}{$t2_id}++;
			$graph->{$t2_id}{$t1_id}++;
			last E2;
		    }
		}
	    }
	}
    }
    return \%graph;
}
#------------------------------------------------------------------------------
sub overlaps {

    my ($exon_1, $exon_2) = @_;

    # If the can't overlap then return 0
    if ($exon_1->{start} > $exon_2->{end} ||
	$exon_1->{end}   < $exon_2->{start})     {
	return 0;
    }
    # Otherwise return 1
    return 1;
}
#------------------------------------------------------------------------------
sub build_genes {

    my ($features, $clusters) = @_;

    my $counter = 1;

    my %genes;
    my %feature_count;

    for my $t_ids (@{$clusters}) {
	    my $g_id = sprintf 'GENE_%d06', $counter++;
	    my ($seqid, $source, $strand);
	    my ($g_min, $g_max) = (10_000_000_000, 0);
	    my %transcripts;

	    for my $t_id (@{$t_ids}) {
		    my ($t_min, $t_max) = (10_000_000_000, 0);
		    for my $type (keys %{$features->{$t_id}}) {
			    my @features;
			    if ($features->{$t_id}{$type}[0]{strand} eq '+') {
				    @features = sort {$a->{start} <=> $b->{stop}}
				      @{$features->{$t_id}{$type}};
			    }
			    else {
				    @features = sort {$b->{start} <=> $a->{stop}}
				      @{$features->{$t_id}{$type}};
			    }
			    for my $feature (@features) {

				    $feature->{parent} = $t_id;
				    my $id = "$t_id:$type:". sprintf '%d06', ++$feature_count{$t_id}{$type};
				    $feature->{id} = $id;

				    $seqid ||= $feature->{seqid};
				    $source ||= $feature->{source};
				    $strand ||= $feature->{strand};

				    $t_min = $feature->{start} < $t_min ?
				      $feature->{start} : $t_min;
				    $t_max = $feature->{stop} > $t_max ?
				      $feature->{stop} : $t_max;
			    }
		    }
		    $transcripts{$t_id} = {seqid   => $seqid,
					   source   => $source,
					   type     => 'mRNA',
					   start    => $t_min,
					   stop     => $t_max,
					   score       => '.',
					   strand   => $strand,
					   phase       => '.',
					   features => $features->{$t_id},
					   parent   => $g_id,
					   id       => $t_id,
					  };

		    $g_min = $t_min < $g_min ?
		      $t_min : $g_min;
		    $g_max = $t_max > $g_max ?
		      $t_max : $g_max;
	    }
	    $genes{$g_id} = {seqid      => $seqid,
			     source      => $source,
			     type        => 'gene',
			     start       => $g_min,
			     stop        => $g_max,
			     score       => '.',
			     strand      => $strand,
			     phase       => '.',
			     transcripts => \%transcripts,
			     id          => $g_id,
			    };
    }
    return \%genes;
}
#-----------------------------------------------------------------------------
sub get_clusters {

    my $graph = shift;

    my @clusters;
    my $visited = {};
    for my $i (keys %{$graph}) {

	next if $visited->{$i};
	$visited->{$i}++;

	my $subgraph = {};
	$subgraph->{$i}++;
	$subgraph = collect_vertices($graph, $i, $visited, $subgraph);
	push @clusters,  [keys %{$subgraph}];

    }
    return \@clusters;
}
#-----------------------------------------------------------------------------
sub collect_vertices {

    my ($graph, $i, $visited, $subgraph) = @_;

    for my $j (keys %{$graph->{$i}}) {
	next if $visited->{$j};
	$visited->{$j}++;
	$subgraph->{$j}++;

	collect_vertices($graph, $j, $visited, $subgraph);
    }

    return $subgraph;
}
#-----------------------------------------------------------------------------
sub print_feature {

    my $feature = shift;

    print join "\t", ($feature->{seqid},
		      $feature->{source},
		      $feature->{type},
		      $feature->{start},
		      $feature->{stop},
		      $feature->{score},
		      $feature->{strand},
		      $feature->{phase},
		      );
    print "\tID=" . $feature->{id} . ';';
    if ($feature->{parent}) {
	print "Parent=" . $feature->{parent} . ';';
    }
    print "\n";

}
