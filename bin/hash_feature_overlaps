#!/usr/bin/perl
use strict;
use warnings;
use DBI;
use Getopt::Long;
use GAL::Annotation;
use Time::HiRes qw(gettimeofday tv_interval);

#-----------------------------------------------------------------------------
#----------------------------------- MAIN ------------------------------------
#-----------------------------------------------------------------------------

my $usage = "

Synopsis:

feature_overlaps --snv_dsn 'dbi:mysql:snv_db'
		 --feature_dsn   'dbi:mysql:feature_db'
		 --expanded --chr chr1

Description:

This script will take two GAL feature databases (one of SNVs and one
of other features).  It will iterate over all the SNVs and find what
features overlap the SNVs.  Output is tab separated and comes in two
forms.  In the compact output every feature from feature_dsn is
printed once in the first column and all features from query_dsn are
printed space separated in the second column.  In the exapnded output
every freature from feature_dsn is printed in the first column and one
feature from query_dsn is printed in the second column.  There is a
separate row for every feature_dsn/query_dsn pair.  The compact output
is the default.


Options:

  snv_dsn:       The database source name of the database that contains
		 the features that will be iterated over.
  feature_dsn:   The database source name of the database that contains
		 the features that will be iterated over.
  expanded:      Print output in expanded form.
  chunk:         The number of features to process at one time;
  user:          The user name of the database owner. [system username]
  password:      The password for the database (if the database is password
		 protected).

Notes:

  Compact (default) output example:
  SNP_ID_001    CDS exon mRNA start_codon
  SNP_ID_002    intron three_prime_cis_splice_site

  Expanded output example:
  YHSNP0128643    SNP     uc009viw.1:gene gene
  YHSNP0128643    SNP     uc009viw.1:mRNA ncRNA
  YHSNP0128643    SNP     uc009viw.1:exon:1       exon
  YHSNP0128643    SNP     NR_024540:mRNA:intron:10        intron
  YHSNP0128643    SNP     uc009viu.1:mRNA:intron:9        intron
  YHSNP0128643    SNP     uc009vis.1:mRNA:intron:3        intron

";

my ($help, $snv_dsn, $feature_dsn, $expanded, $chunk, $user, $password);

my $opt_success = GetOptions('help'           => \$help,
			     'snv_dsn=s'      => \$snv_dsn,
			     'feature_dsn=s'  => \$feature_dsn,
			     'expanded'       => \$expanded,
			     'chunk=i'        => \$chunk,
			     'user=s'         => \$user,
			     'password=s'     => \$password,
			    );

$| = 1;

die $usage if $help || ! $opt_success;
die $usage unless ($snv_dsn && $feature_dsn);

my $snv_dbh     = DBI->connect($snv_dsn);
my $chrs        = $snv_dbh->selectall_arrayref("SELECT DISTINCT(seqid) FROM feature WHERE type = 'SNV'");

my $feature_dbh = DBI->connect($feature_dsn);

my $count_stmt = ("SELECT COUNT(*) FROM feature where type != 'gene'");
my ($feature_count) = $feature_dbh->selectrow_array($count_stmt);

my $count = 1;
my $t0 = [gettimeofday];
for my $chr (@{$chrs}) {

    my $chr = $chr->[0];
    next if $chr =~ /chrNT_\d+/;
    
    my ($max)  = $snv_dbh->selectrow_array("SELECT max(end) from feature WHERE " .
					   "type = 'SNV' and seqid = '$chr'");

    my ($chunk_start, $chunk_end) = (0, 0);
    while ($chunk_end < $max) {
	$chunk_start = $chunk_end;
	$chunk_end   += $chunk;

	my $feature_stmt = ("SELECT feature_id, seqid, type, start, end FROM feature " .
			    "where seqid = '$chr' AND type != 'gene' AND start <= $chunk_end AND " .
			    "end >= $chunk_start"
			    );
	my $feature_sth = $feature_dbh->prepare($feature_stmt);
	my $feature_rv  = $feature_sth->execute;

	my ($feature_id, $seqid, $type, $start, $end);
	my %index;
	while (($feature_id, $seqid, $type, $start, $end) = $feature_sth->fetchrow_array) {

	    map {push @{$index{"$seqid:$_"}}, [$type,$feature_id]} ($start .. $end);
	    unless ($count % 1000) {
		my $elapsed = tv_interval($t0);
		my $total = (($elapsed /$count) * $feature_count) / 60 / 60;
		my $pct = int($count / $feature_count * 100);
		$elapsed / 60 / 60;
		print STDERR "$count ($pct)\t$elapsed\t$total\n";
	    }
	    $count++;
	}

	my $snv_stmt    = ("SELECT feature_id, seqid, start FROM feature WHERE type = 'SNV' " .
			   "AND seqid = '$chr' AND start > $chunk_start AND end <= $chunk_end"
			   );
	my $snv_sth     = $snv_dbh->prepare($snv_stmt);
	my $snv_rv      = $snv_sth->execute;
	
      SNV:
	while (my ($snv_id, $seqid, $start) = $snv_sth->fetchrow_array) {
	    
	    my $features = $index{"$seqid:$start"};
	    print '# ' . $snv_id . "\n";
	    
	    for my $feature (@{$features}) {
		
		my ($feature_id, $type) = @{$feature};
		
		print join "\t", ($snv_id,
				  $feature_id,
				  $type,
				  );
		print "\n";
	    }
	}
    }
}
