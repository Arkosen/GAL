#!/usr/bin/perl

use strict;
use warnings;
use Getopt::Long;
use GAL::Annotation;

#-----------------------------------------------------------------------------
#----------------------------------- MAIN ------------------------------------
#-----------------------------------------------------------------------------
my $usage = "

Synopsis:

gal_design_spec

Description:

No really, how the hell do you use this thing!

";


my ($help);
my $opt_success = GetOptions('help'    => \$help,
			      );

die $usage if $help || ! $opt_success;

my $file = shift;
die $usage unless $file;

my $gene_annotations = GAL::Annotation->new(dsn  => 'dbi:mysql:ucsc_genes');

$gene_annotations->load_file(file    => 'ucsc_genes.gff3',
			     format  => 'ucsc_gtf',
			    );

my $exons = $gene_annotations->set(type => 'exons');

$exons->cluster_and_create_genes;

my $mRNAs->$gene_annotations->set(type => 'mRNA');
$mRNAs->infer_features(infer_type => 'CDS');

my $CDSs->$gene_annotations->set(type => 'CDS');
$CDSs->infer_features(infer_type => 'codon');

my $cds_footprint = $gene_annotations->set(type => 'CDS')->footprint;

my $snp_annotations = GAL::Annotation->new(dsn  => 'dbi:mysql:NA19240_snps');

$snp_annotations->load_file(file    => 'NA19240_snps.gff3',
			    format  => 'solid',
			   );

my @genes = $gene_annotations->set(seqid  => 'chr1',
				   type   => 'gene');

for my $gene (@genes) {

  for my $mRNA ($gene->children(type => 'mRNA')) {

    my $CDSs = $mRNA->children->(type => 'CDS');
    my $CDS  = $CDSs->longest;

    my $snps = $snp_annotations->overlaps(feature => $CDS,
					  type    => 'SNP');

    while (my $snp = $snps->next) {

      my $ref_allele = $snp->seq;

      # Only dealing with one variant_allele;
      my ($variant_allele) = $snp->attributes(variant_allele);
      my $codons = $gene_annotations->set(type   => 'codon',
					  parent => $CDS);

      my $codon = $codons->overlaps(feature => $snp,
				    parent  => $CDS,
				    type    => 'codon');

      my $codon_position  = $codon->my_coordinate($snp->start);
      my $ref_codon_seq   = $codon->seq;
      my $variant_codon_seq = $ref_codon_seq;
      substr($variant_codon_seq, $codon_position - 1, $snp->length, $variant_allele);

      $snp->variant_effect(feature => $CDS);
    }
  }
}

#-----------------------------------------------------------------------------
#-------------------------------- SUBROUTINES --------------------------------
#-----------------------------------------------------------------------------

