#!/usr/bin/perl -w 
use strict;
use lib '/Users/myandell/lib';
use warnings;
use FileHandle;
use PostData;
use Getopt::Std;
use vars qw($opt_o $opt_e $opt_l $opt_c);
getopts('o:e:l:c:'); 

$| = 1;


my $usage = "

\n\n

distance_machine_runner: calculates an i j distance for two GVF files.

OPTIONS: -o <out dir> where to write the files
         -e <path to distance_machine exe>
	 -l <path to list_file produced by distance_machine_list_maker>
	 -c < all, each, chrN> all: one distance for all 22 autosomes, each:for each autosome, \\d+: distance for that chr

         distance_machine_runner -o ./distances/test -e ../GAL/bin/distance_machine -l list_file -c 22
 
\n\n";
#--------------------------------------------------------------------------------
#-------------------------------------- MAIN ------------------------------------
#--------------------------------------------------------------------------------


die $usage unless args_okay();

my $files = parse_list_file($opt_l);

foreach my $p (@{$files}){
	my $i_file = $p->[0];
	my $j_file = $p->[1];

	my ($i_name) = $i_file =~ /\/?([^\/]+)$/;
	my ($j_name) = $j_file =~ /\/?([^\/]+)$/;

	die "i_name not defined!\n" unless $i_name;
	die "j_name not defined!\n" unless $j_name;

	process_pair($i_name, $j_name, $i_file, $j_file);
}

#--------------------------------------------------------------------------------
#---------------------------------------- SUBS ----------------------------------
#--------------------------------------------------------------------------------
sub process_pair {

	my $i_name = shift;
	my $j_name = shift;
	my $i_file = shift;
	my $j_file = shift;

	if    ($opt_c eq 'all'){
        	run('all', $i_name, $j_name, $i_file, $j_file);
	}
	elsif ($opt_c eq 'each'){
        	for (my $c = 1; $c < 23; $c++){
                	run($c, $i_name, $j_name, $i_file, $j_file);
        	}
	}
	elsif ($opt_c =~ /\d+/){
        	run($opt_c, $i_name, $j_name, $i_file, $j_file);
	}
}
#--------------------------------------------------------------------------------
sub run {
	my $chr    = shift;
	my $i_name = shift;
	my $j_name = shift;
	my $i_file = shift;
	my $j_file = shift;

	my $out = $opt_o.'/matrix.'.$i_name.'.VS.'.$j_name.'.'.$chr;

	my $command  = $opt_e;
	   $command .= ' --chr '.$chr unless $chr eq 'all';	
	   $command .= " $i_file $j_file ";
   	   $command .= '   >  '.$out;

	print STDERR $command."\n";

	system("$command") unless -e $out;
}
#--------------------------------------------------------------------------------
sub parse_list_file {
	my $list_file = shift;

	my $fh = new FileHandle();
	   $fh->open($list_file);

	my @files;
	while (my $l = <$fh>){
		chomp($l);
		my ($a, $b) = split(/\t/, $l);
		die "can\'t find file:$a!\n" unless -e $a;
		die "can\'t find file:$b!\n" unless -e $b;
		push(@files, [$a, $b]);
	}
	$fh->close();

	return \@files;
}

#--------------------------------------------------------------------------------
sub args_okay {

	return 0 unless $opt_o && $opt_e && $opt_l && $opt_c;

	return 0 unless -e $opt_o || mkdir $opt_o;

	return 0 unless $opt_c eq 'all' || $opt_c eq 'each' || $opt_c =~ /\d+/;

	return 1;

}
#--------------------------------------------------------------------------------





