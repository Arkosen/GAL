#!/usr/bin/perl

use strict;
use warnings;
use Getopt::Long;
use GAL::Annotation;
use IO::Prompt;

#-----------------------------------------------------------------------------
#----------------------------------- MAIN ------------------------------------
#-----------------------------------------------------------------------------

my $usage = "

Synopsis:

validate_proteins  --driver SQLite --fasta path/to/fasta               \
                   --features feature.sqlite


Description:

Options:

  create       Only create and load the databases then die.
	       to add to  the existing database if it exists.
  parser       The format of the input file (a subclass of GAL::Parser).
  driver       The type of storage to use (a sublcass of GAL::Storage).
  fasta        A path to the fasta files associated with the give features.
  features     The database name for the features.
  user         The database user.  Defaults first to \$ENV{\${driver}_user}
	       where \$driver is the driver parsed from the dsn. ['']
  password     The database password.   Defaults first to
	       \$ENV{\${driver}_password} where \$driver is the driver
	       parsed from the dsn.
  prompt       Prompt for the password on the command line.

";

my ($help, $create, $parser, $driver, $fasta, $feature_db, $variant_db, $user,
    $password, $prompt);
my $opt_success = GetOptions('help'          => \$help,
			     'create'        => \$create,
			     'parser=s'      => \$parser,
			     'driver=s'     => \$driver,
			     'fasta=s'       => \$fasta,
			     'features=s'    => \$feature_db,
			     'variants=s'    => \$variant_db,
			     'user=s'        => \$user,
			     'password=s'    => \$password,
			     'prompt'        => sub {$password = prompt("Password: ", -tty,  -echo => '*')->{value}},
			      );

if (! $opt_success) {
    print STDERR join ' : ', ('FATAL',
                              'command_line_parse_error',
                              'Use gff_tool --help to see correct usage');
}

if ($help) {
 print $usage;
 exit(0);
}

die $usage unless $feature_db;

$driver ||= 'SQLite';

my $feature_file = shift;

my $feat_store_args = {class    => $driver,
		       database => $feature_db,
		       user     => $user,
		       password => $password,
                   };

my $feat_store = GAL::Annotation->new(storage => $feat_store_args,
				      fasta   => $fasta,
				     );

if ($parser) {
    $feat_store->parser(class => $parser);
}

if ($create) {
  $feat_store->load_files(files => $feature_file,
			  mode  => 'overwrite',
			 );
  exit 0;
}

my $features = $feat_store->schema->resultset('Feature');

my $mrnas = $features->search({type => 'mRNA'});
while (my $mrna = $mrnas->next) {
    my $mrna_id = $mrna->feature_id;
    my $prot = $mrna->protein_seq;
    $prot =~ s/\*$//;
    print "$mrna_id\t";
    print $prot =~ /\*/ ? "INVALID\t$prot" : "VALID";
    print "\n";
}
