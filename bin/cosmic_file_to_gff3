#!/usr/bin/perl
use strict;
use warnings;
use Getopt::Long;
use PostData;
use GAL::het_homo_or_repeat;
$| = 1;
#-----------------------------------------------------------------------------
#----------------------------------- MAIN ------------------------------------
#-----------------------------------------------------------------------------
my $usage = "

Synopsis:

cosmic_file_to_gff3  <cosmic file>

Description:

This script will convert variant data from the Cosmic database to GFF3

OPTIONS:

  --help      Print this usage statement.

EXAMPLE:

cosmic_file_to_gff3  CosmicMutantExport_v42_250609.tsv.txt

";


my ($help, );
my $opt_success = GetOptions('help'       => \$help,
			      );

die $usage if $help || ! $opt_success;

my $file = shift;
die $usage unless -e $file;

my $fh = new FileHandle();
   $fh->open($file);

my $header = <$fh>;

#print $header."\n";

my $mystery_line = <$fh>;

my %DATA;
my $i = 0;
while (defined(my $line = <$fh>)){
	chomp($line);

	my @fields = split(/\t/, $line);

	my $num_columns = @fields;

	if    ($num_columns == 16){
		print_line_16(\@fields);
	}
	elsif ($num_columns == 15){
		print_line_16(\@fields);
	}
	else {
		#warn "unexpected num of columns:$num_columns line number $i. LINE:$line\n";
		#sleep 2;
	}
	$i++;
}

$fh->close();

#-------------------------------------------------------------------------------------------
sub print_line_16 {
	my $fields = shift;


	#PostData($fields);

	my $gene_name            = $fields->[0];
	my $hgnc                 = $fields->[1];
	my $sample_name          = $fields->[2];
	my $primary_site         = $fields->[3];
	my $site_subtype         = $fields->[4];
	my $primary_histology    = $fields->[5];
	my $histology_subtype    = $fields->[6];
	my $mutation_id          = $fields->[7];
	my $mutation_cds         = $fields->[8];
	my $mutation_aa          = $fields->[9];
	my $mutation_description = $fields->[10];
	my $chromosome           = $fields->[11];
	my $genome_start         = $fields->[12];
	my $genome_end           = $fields->[13];
	my $genome_strand        = $fields->[14];
	my $pubmed_pmid          = $fields->[15];


	return unless $genome_start =~ /\d+/ && $genome_end =~ /\d+/;


	my $type;
	my %nine;

	$nine{pubmed_id} = $pubmed_pmid if defined $pubmed_pmid;

	$nine{primary_site}      = $primary_site;
	$nine{site_subtype}      = $site_subtype;
	$nine{primary_histology} = $primary_histology;
	$nine{histology_subtype} = $histology_subtype;
	$nine{HGNC}              = $hgnc;
	$nine{ID}                = 'COSMIC:'.$mutation_id;
	$nine{sample_name}       = $sample_name;


	my $base_ref;
	my $base_var;

	if ($mutation_cds =~ /\?/){
		warn "#---\n"."UNCAPUTRED IN print_line_16\n".join("\t", @{$fields})."\n"."#---\n";
		return;
	}
	elsif ($mutation_cds =~ /c\.\d+\S\>\S/){
	       ($base_ref, $base_var) = $mutation_cds =~ /c\.\d+(\S)\>(\S)/;
		$nine{reference_allele} = $base_ref;
		$nine{variant_allele}   = $base_var;
		$type = 'SNP';
	}
	elsif ($mutation_cds =~ /c\.\d+[\+,\-]\d+\S>\S/){
	       ($base_ref, $base_var) = $mutation_cds =~ /c\.\d+[\+,\-]\d+(\S)>(\S)/;
		$nine{reference_allele} = $base_ref;
		$nine{variant_allele}   = $base_var;
		$type = 'SNP';
	}
	elsif ($mutation_cds =~ /c\.\d+[\+,\-]\d+ins\S+/){
	       ($base_var) = $mutation_cds =~ /c\.\d+[\+,\-]\d+ins(\S+)/;
		$base_ref = '-';
		$nine{reference_allele} = $base_ref;
		$nine{variant_allele}   = $base_var;
		$type = 'INS';
	}
	elsif ($mutation_cds =~ /c\.\d+[\+,\-]\d+del\S+/){
	       ($base_ref) = $mutation_cds =~ /c\.\d+[\+,\-]\d+del(\S+)/;
		$base_var = '-';
		$nine{reference_allele} = $base_ref;
		$nine{variant_allele}   = $base_var;
		$type = 'DEL';
	}
	elsif ($mutation_cds =~ /c\.\d+\_\d+del\S+/){
		my ($s, $e);

		($s, $e, $base_ref) = $mutation_cds =~ /c\.(\d+)\_(\d+)del(\S+)/;

		my $x = $e - $s + 1;
		my $l = length($base_ref);
		my $y = $genome_end - $genome_start + 1;

		$base_var  = '-';
		$nine{reference_allele} = $base_ref;
		$nine{variant_allele}   = $base_var;
		$type = 'DEL';
		return unless $x == $y;

	}
	elsif ($mutation_cds =~ /c\.\d+del\S/){
		my ($s, $e);

		($base_ref) = $mutation_cds =~ /c\.\d+del(\S)/;
		 $base_var  = '-';

		$nine{reference_allele} = $base_ref;
		$nine{variant_allele}   = $base_var;
		$type = 'DEL';

	}
	elsif ($mutation_cds =~ /c\.\d+\_\d+ins\S+/){
		my ($s, $e);

		($s, $e, $base_var) = $mutation_cds =~ /c\.(\d+)\_(\d+)ins(\S+)/;

		my $x = $e - $s + 1;
		my $l = length($base_var);
		my $y = $genome_end - $genome_start + 1;

		 $base_ref  = '-';
		$nine{reference_allele} = $base_ref;
		$nine{variant_allele}   = $base_var;
		$type = 'INS';
		return unless $x == $y;

	}
	elsif ($mutation_cds =~ /c\.\d+\_\d+\S+\>\S+/){
		my ($s, $e);

		($s, $e, $base_ref, $base_var) = $mutation_cds =~ /c\.(\d+)\_(\d+)(\S+)\>(\S+)/;

		my $x = $e - $s + 1;
		my $y = $genome_end - $genome_start + 1;

		$nine{reference_allele} = $base_ref;
		$nine{variant_allele}   = $base_var;
		$type = 'CMX';
		return unless $x == $y && length($base_ref) == length($base_var);

	}
	elsif ($mutation_cds =~ /c\.\d+[\+\-]\d+\S+\>\S+/){

		($base_ref, $base_var) = $mutation_cds =~ /c\.\d+[\+\-]\d+(\S+)\>(\S+)/;


		$nine{reference_allele} = $base_ref;
		$nine{variant_allele}   = $base_var;
		$type = 'CMX';
		return unless  length($base_ref) == length($base_var);

	}
	else {
		warn "#---\n"."UNCAPUTRED IN print_line_16\n".join("\t", @{$fields})."\n"."#---\n";

		sleep 1;
	}


	to_gff('chr'.$chromosome,
	       'Cosmic',
		$type,
		$genome_start,
		$genome_end,
		'.',
		$genome_strand,
		'.',
		\%nine,
		);

}
#-------------------------------------------------------------------------------------------
sub to_gff {

	my $nine = pop @_;

	#PostData($nine);

	print join("\t", @_)."\t";

	foreach my $key (keys %{$nine}){
		print $key.'='.$nine->{$key}.';';
	}
	print "\n";
}
