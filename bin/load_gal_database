#!/usr/bin/perl
use strict;
use warnings;
use Getopt::Long;
use IO::Prompt;
use DBI;
use File::Temp qw(tempfile);

#-----------------------------------------------------------------------------
#----------------------------------- MAIN ------------------------------------
#-----------------------------------------------------------------------------
my $usage = "

Synopsis:

load_gal_database --create --format gff3 --dsn 'dbi:mysql:gff_db' file.gff3 [another_file.gff3]

Description:

Load a feature file into a GAL database.

Options:

  create     Drop (if exists) and create the database first.  Default is
             to add to  the existing database if it exists.
  format     The format of the input file (a subclass of GAL::Parser).
  dsn        The DBI connection string (e.g. dbi:mysql:database).
	     Currently only expected to work with MySQL.
  user       The database user.  Defaults first to \$ENV{\${driver}_user}
             where \$driver is the driver parsed from the dsn. ['']
  password   The database password.   Defaults first to
	     \$ENV{\${driver}_password} where \$driver is the driver
	     parsed from the dsn.
  prompt     Prompt for the password on the command line.

";


my ($help, $create, $format, $dsn, $user, $password, $prompt);
my $opt_success = GetOptions('help'         => \$help,
                             'dsn=s'        => \$dsn,
                             'format=s'     => \$format,
  			     'create'       => \$create,
 			     'user=s'       => \$user,
 			     'password=s'   => \$password,
 			     'prompt'       => sub {$password = prompt("Password: ", -tty,  -echo => '*')->{value}},
);

die $usage if $help || ! $opt_success;

my $file = shift;
die $usage unless -r $file;

my ($scheme, $driver) = split /:/, $dsn;

$user     ||= $ENV{"${driver}_user"};
$password ||= $ENV{"${driver}_password"};


my $class = "GAL::Parser::$format";
eval "require $class";
die $@ if $@;

my $parser = $class->new(file => $file);

my ($FEAT_TEMP, $feat_filename) = tempfile();
my ($ATT_TEMP,  $att_filename)  = tempfile();

while (my $feature = $parser->next_feature_hash) {
        my $feature_id = $feature->{feature_id};
        my @feature_data = @{$feature}{qw(feature_id seqid source type start end score strand phase)};
        my $attributes = $feature->{attributes};
        print $FEAT_TEMP join "\t", @feature_data;
        print $FEAT_TEMP "\n";

        for my $key (keys %{$attributes}) {
                my @values = $attributes->{$key};
                for my $value (@values) {
                        print $ATT_TEMP  join "\t", ($feature_id, $key, $value);
                        print $ATT_TEMP "\n";
                }
        }
}

create_db($dsn) if $create;

my $dbh      = DBI->connect($dsn, $user, $password);

$dbh->do("LOAD DATA INFILE '$feat_filename' INTO TABLE feature (feature_id, seqid, source, type, start, end, score, strand, phase)");
$dbh->do("LOAD DATA INFILE '$att_filename'  INTO TABLE attribute (feature_id, att_key, att_value)");

if ($create) {
	$dbh->do("CREATE INDEX feature_id_index USING BTREE ON feature (feature_id)");
	# $dbh->do("CREATE INDEX seqid_index USING BTREE ON feature (seqid)");
	$dbh->do("CREATE INDEX seqid_start_end_index USING BTREE ON feature (seqid start end)");
	# $dbh->do("CREATE INDEX type_index USING BTREE ON feature (type)");
	$dbh->do("CREATE INDEX att_feature_id_index USING BTREE ON attribute (feature_id)");
	$dbh->do("CREATE INDEX att_key_value_index USING BTREE ON attribute (att_key att_value)");
}

#-----------------------------------------------------------------------------
#-------------------------------- SUBROUTINES --------------------------------
#-----------------------------------------------------------------------------
sub create_db {

	my $dsn = shift;

	my ($db_name) = $dsn =~ /([^:]+)$/;

	my $attributes = {host     => 'localhost',
			  user     => $user,
			  password => $password,
			  };

	my $drh = DBI->install_driver('mysql', $attributes);

	if (grep {$_ eq "DBI:mysql:$db_name"} $drh->data_sources($attributes)) {
		$drh->func('dropdb'  , $db_name, 'localhost', $user, $password, 'admin') or die "Can't drop database $db_name\n";
		$drh->func('createdb', $db_name, 'localhost', $user, $password, 'admin') or die "Can't create database $db_name\n";
	}
	else {
		$drh->func('createdb', $db_name, 'localhost', $user, $password, 'admin') or die "Can't create database $db_name\n";
	}

	my $dbh = DBI->connect($dsn, $user, $password);

	$dbh->do("DROP TABLE IF EXISTS feature");
	$dbh->do("DROP TABLE IF EXISTS attribute");
	$dbh->do("CREATE TABLE feature ("    .
		 "feature_id VARCHAR(100), " .
		 "seqid VARCHAR(100), "      .
		 "source VARCHAR(100), "     .
		 "type VARCHAR(100), "       .
		 "start INT, "               .
		 "end INT, "                 .
		 "score varchar(20), "       .
		 "strand VARCHAR(1), "       .
		 "phase VARCHAR(1))"         
		 # "name VARCHAR(100), "      .
		 # "parent VARCHAR(100), "    .
		 # "bin INT)"
		 );
	$dbh->do("CREATE TABLE attribute ("  .
		 "attribute_id INT NOT NULL AUTO_INCREMENT, " .
		 "feature_id VARCHAR(100), " .
		 "att_key VARCHAR(100), "    .
		 "att_value TEXT, "          .
		 "PRIMARY KEY (attribute_id))"
		 );
}
