#!/usr/bin/perl
use strict;
use warnings;
use Getopt::Long;
use Datastore::MD5;
use URI::Escape;
use DBI;
use CGL::Annotation;

#-----------------------------------------------------------------------------
#----------------------------------- MAIN ------------------------------------
#-----------------------------------------------------------------------------

my $usage = "

Synopsis:

snp2gene --datastore datastore.index --cgl_format gff3 --type SNP
	 --dsn dbi:mysql:db_name --user user_name --passwd password
         --subject 123456 --test

Description:

This script will locate all snps associated with a given gene in a CGL datastore
and write a .snp file in the same directory.

Options:

  datastore  The datastore index file for the gene datastore.
  cgl_format The format of the gene annotation GFF3 file.
  type       The variant type to analyze (i.e. SNP MNP nucleotide_insertion)
  subject    An ID for the individual being analyzed.
  dsn        The DBI connection string [dbi:mysql:database=pcode]
  user       The user to connect to the database as [bmoore]
  password   The password to connect to the database with ['']
  continue   Will not rewrite existing .snp files.  This allow you
	     to continue a previously aborted run.  No validation is
	     done to ensure that previous files were not corrupted in
	     any previous run failure.
  test       Just print to STDOUT not to .snp files.

";

my ($help, $ds_index_file, $cgl_format, @type, $subject, $dsn, $user,
    $psswd, $continue, $test);
my $opt_success = GetOptions('help'         => \$help,
			     'datastore=s'  => \$ds_index_file,
			     'cgl_format=s' => \$cgl_format,
			     'type=s'       => \@type,
			     'subject=s'    => \$subject,
			     'dsn=s'        => \$dsn,
			     'user=s'       => \$user,
			     'psswd=s'      => \$psswd,
			     'continue'     => \$continue,
			     'test'         => \$test,
			      );

die $usage if ( $help          ||
		! $opt_success ||
		! $cgl_format
	      );

die $usage unless $dsn;

my $type_text = join ', ', map {"'$_'"} @type;

my $dbh     = DBI->connect($dsn, $user, $psswd);
my $sth_snp = $dbh->prepare("SELECT feature_id, start, end FROM feature WHERE type IN ($type_text) AND seqid = ? AND ((start >= ? AND start <= ?) OR (end >= ? AND end <= ?))");
my $sth_ref = $dbh->prepare("SELECT a.att_value as reference_allele FROM feature f, attribute a WHERE f.feature_id = ? AND f.feature_id = a.feature_id AND a.att_key = 'reference_allele'");
my $sth_var = $dbh->prepare("SELECT a.att_value as reference_allele FROM feature f, attribute a WHERE f.feature_id = ? AND f.feature_id = a.feature_id AND a.att_key = 'variant_allele'");

my $ds = parse_datastore($ds_index_file);

for my $gene_id (keys %{$ds}) {

	my ($gff_file, $fasta_file);
	$gff_file = $ds->{$gene_id};

	my $snp_file;
	($snp_file   = $gff_file)   =~ s/\.gff3?$/_$subject.snp/;

	if ($continue && -e $snp_file) {
		print STDERR "Continue\t$subject\t$gene_id\n";
		next;
	}

	($fasta_file = $gff_file)   =~ s/\.gff3?$/.fasta/;

	my $cgl  = CGL::Annotation->new(format     => $cgl_format,
					gff_file   => $gff_file,
					fasta_file => $fasta_file,
				       );

	my $contig = $cgl->contig(0);
	my $genes  = $cgl->genes();
	my $gene   = shift @{$genes};

	my $ctg_name	= $contig->id;
	my ($ctg_id, $ctg_begin, $ctg_end) = split /:/, $ctg_name;
	($ctg_begin, $ctg_end) = ($ctg_end, $ctg_begin) if $ctg_begin > $ctg_end;

	my $gene_id     = $gene->id;
	my $gene_begin  = $gene->nbeg;
	my $gene_end    = $gene->nend;
	my $gene_strand = $gene->strand;
	my $gene_length = abs($gene_begin - $gene_end);

	my ($gene_5p_end, $gene_3p_end);
	if ($gene_strand == 1) {
		$gene_5p_end = $ctg_begin + $gene_begin;
		$gene_3p_end = $gene_5p_end + $gene_length;
	}
	elsif ($gene_strand == -1) {
		$gene_3p_end = $ctg_end - $gene_begin;
		$gene_5p_end = $gene_3p_end - $gene_length;
	}
	else {
		die "Bad gene strand: $gene_strand\n";
	}

	my $snps = $dbh->selectall_hashref($sth_snp, [qw(feature_id)], {}, ($ctg_id, $ctg_begin + 499, $ctg_end - 499, $ctg_begin + 499, $ctg_end - 499));

	my $SNP;
	if ($test) {
		open ($SNP, ">&=STDOUT") or die "Can't open STDOUT\n";
	}
	else {
		open ($SNP, '>', $snp_file) or
		  die "Can't open $snp_file for writing\n";
	}

	print STDERR "Processed\t$gene_id\t$subject\t\n";
	print STDERR "Wrote\t$gene_id\t$subject\t\n" if keys %{$snps};

	for my $snp_id (keys %{$snps}) {

		my $snp = $snps->{$snp_id};


		my $ref_allele = $dbh->selectall_arrayref($sth_ref, {}, ($snp_id));
		$ref_allele = $ref_allele->[0][0];

		my $var_reference = $dbh->selectall_arrayref($sth_var, {}, ($snp_id));;
		my %var_hash = map {$_->[0], 1} @{$var_reference};
		my @var_alleles = grep {$_ ne $ref_allele} keys %var_hash;

		my $alleles = join '/', ($ref_allele, @var_alleles);

		print  $SNP join "\t", ($subject,
					$ctg_id,
					$gene_id,
					$snp->{feature_id},
					$snp->{start},
					$alleles,
					'.',
					'+',
				       );
		print $SNP "\n";
	}
	close $SNP;
}

#-----------------------------------------------------------------------------
#-------------------------------- SUBROUTINES --------------------------------
#-----------------------------------------------------------------------------
sub parse_datastore {
	my $ds_index = shift;

	open (my $IN, '<', $ds_index) or
	  die "Can't open file $ds_index for reading\n$!\n";

	my %index;
	while (<$IN>) {
		chomp;
		my ($key, $value) = split /\t/, $_;
		$index{$key} = $value;
	}
	return \%index;
}
