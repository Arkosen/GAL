#!/usr/bin/perl

use strict;
use warnings;
use Getopt::Long;
use GAL::Annotation;

#-----------------------------------------------------------------------------
#----------------------------------- MAIN ------------------------------------
#-----------------------------------------------------------------------------

my $usage = "

Synopsis:

macs_nearest_gene macs_summits.gff3 feature.gff3

Description:

This script will find the nearest gene for each MACS hit.

";

my ($help);

my $opt_success = GetOptions('help|h'            => \$help,
			      );

die $usage unless $opt_success;
if ($help) {
  print $usage;
  exit(0);
}


my ($macs_file, $gff_file) = @ARGV;

die "$usage\n\nFATAL : missing_macs_file : MACS summit file required\n" unless $macs_file;
die "$usage\n\nFATAL : missing_gff3_file : GFF3 file required\n"        unless $gff_file;

my $macs  = GAL::Annotation->new($macs_file)->features;
my $genes = GAL::Annotation->new($gff_file)->features;

# Do the search and get an interator for all matching features
while (my $summit = $macs->next) {

    my $five_prime_genes = $genes->search({type  => 'gene',
					   seqid => $summit->seqid,
					   start   => {'<=', $summit->end}},
					  {order_by => { -desc => 'end' }},
	);
    
    my $fp_gene = $five_prime_genes->next;

    my $three_prime_genes = $genes->search({type  => 'gene',
					    seqid => $summit->seqid,
					    end   => {'>=', $summit->start}},
					   {order_by => { -asc => 'start' }},
	);
    
    my $tp_gene = $three_prime_genes->next;

    my $summit_locus = $summit->locus;
    my $summit_id = $summit->feature_id;
    my $fp_gene_id       = defined $fp_gene ? $fp_gene->feature_id           : 'N/A';
    my $fp_gene_distance = defined $fp_gene ? $summit->start - $fp_gene->end : 'N/A';
    my $tp_gene_id       = defined $tp_gene ? $tp_gene->feature_id           : 'N/A';
    my $tp_gene_distance = defined $tp_gene ? $summit->end - $tp_gene->start : 'N/A';

    print join "\t", ($summit_id, $summit_locus, $fp_gene_id, $fp_gene_distance, $tp_gene_id, $tp_gene_distance);
    print "\n";
}

# # Get the feature ID
# my $mrna_id = $mrna->feature_id;
# # Get all the exons for this mRNA
# my $exons = $mrna->exons;
# my $e_count = $exons->count;
# my ($e_length, $e_gc);
# # Iterate over each exon
# while (my $exon = $exons->next) {
#   $e_length += $exon->length;
#   $e_gc     += $exon->gc_content;
# }
# print join "\t", int($e_length/$e_count), $e_gc/$e_count;
# print "\n";
# # Introns don't exist in the dataset, so GAL
# # will infer them on the fly.
# my $introns = $mrna->introns;
# my $i_count = $introns->count;
# my ($i_length, $i_gc);
# while (my $intron = $introns->next) {
#   $i_length += $intron->length;
#   $i_gc     += $intron->gc_content;
# }
# print $i_length ? join("\t", int($i_length/$i_count), '',
# 			 $i_gc/$i_count) : "\t\t";
# print "\n";
