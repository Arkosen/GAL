#!/usr/bin/perl

use strict;
use warnings;
use Getopt::Long;
use GAL::Annotation;
use IO::Prompt;

#-----------------------------------------------------------------------------
#----------------------------------- MAIN ------------------------------------
#-----------------------------------------------------------------------------

my $usage = "

Synopsis:

variant_classifier --create --parser gff3 --driver SQLite              \
		   --fasta path/to/fasta                               \
		   --features feature.sqlite --variants variant.sqlite \
		   genome_annotation.gff3 variants.gvf

Description:

This script will take a genome annotation file, a variant file and classify
the functional effects of the variants against mRNA annotations.

Options:

  create       Only create and load the databases then die.
	       to add to  the existing database if it exists.
  parser       The format of the input file (a subclass of GAL::Parser).
  driver       The type of storage to use (a sublcass of GAL::Storage).
  fasta        A path to the fasta files associated with the give features.
  features     The database name for the features.
  variants     The database name for the variants.
  chr          Limit the analysis to a chromosome.
  user         The database user.  Defaults first to \$ENV{\${driver}_user}
	       where \$driver is the driver parsed from the dsn. ['']
  password     The database password.   Defaults first to
	       \$ENV{\${driver}_password} where \$driver is the driver
	       parsed from the dsn.
  prompt       Prompt for the password on the command line.

";

my ($help, $create, $parser, $driver, $fasta, $feature_db,
    $variant_db, $limit_chr, $user, $password, $prompt);

my $opt_success = GetOptions('help'          => \$help,
			     'create'        => \$create,
			     'parser=s'      => \$parser,
			     'driver=s'      => \$driver,
			     'fasta=s'       => \$fasta,
			     'features=s'    => \$feature_db,
			     'variants=s'    => \$variant_db,
			     'chr=s'         => \$limit_chr,
			     'user=s'        => \$user,
			     'password=s'    => \$password,
			     'prompt'        => sub {$password = prompt("Password: ", -tty,  -echo => '*')->{value}},
			      );

die $usage if $help || ! $opt_success;

die $usage unless ($feature_db && $variant_db) || $create;

$driver ||= 'SQLite';
$parser ||= 'gff3';

my ($feature_file, $variant_file) = @ARGV;



my $feat_store_args = {class    => $driver,
		       database => $feature_db,
		       user     => $user,
		       password => $password,
		   };

my $var_store_args = {class    => $driver,
		      database => $variant_db,
		      user     => $user,
		      password => $password,
		     };

my $feat_store = GAL::Annotation->new(storage => $feat_store_args,
				      fasta   => $fasta,
				     );

my $var_store = GAL::Annotation->new(storage => $var_store_args,
				     fasta   => $fasta,
				    );

if ($parser) {
    $feat_store->parser(class => $parser);
    $var_store->parser(class => $parser);
}

if ($create) {
  $feat_store->load_files(files => $feature_file,
			  mode  => 'overwrite',
			 );
  $var_store->load_files(files => $variant_file,
			 mode  => 'overwrite',
			);
  exit 0;
}

my $features = $feat_store->schema->resultset('Feature');
my $variants = $var_store->schema->resultset('Feature');
# my $atts =     $var_store->schema->resultset('Attribute');

my %feature_where = (type => 'mRNA');
if ($limit_chr) {
    $feature_where{seqid} = $limit_chr;
}

my $mrnas = $features->search(\%feature_where);

while (my $mrna = $mrnas->next) {
    my $mrna_id = $mrna->feature_id;
    my $CDSs = $mrna->CDSs;
    while (my $CDS = $CDSs->next) {
	my $bins = $CDS->get_feature_bins;
	my $cds_start = $CDS->start;
	my $cds_end   = $CDS->end;
	my %where = (bin   => {'-in' => $bins},
		     start => {'>='  => $cds_start},
		     end   => {'<='  => $cds_end},
		     );
	my $these_variants = $variants->search(\%where); # ->cursor

	while (my $variant = $these_variants->next) {
	    my $variant_id = $variant->feature_id;
	    my $seqid = $variant->seqid;
	    my $type  = $variant->type;
	    my $var_start = $variant->start;
	    my $reference_seq = $variant->reference_seq;
	    my @variant_seqs  = $variant->variant_seq_no_ref;

	    for my $variant_seq (@variant_seqs) {
		my $mrna_variant_seq = $variant_seq;
		$mrna_variant_seq = $mrna->annotation->revcomp($variant_seq)
		    if $mrna->strand eq '-';
		my ($ref_codon, $offset) = $mrna->codon_at_location($var_start);
		unless ($ref_codon) {
		    warn "WARN : invalid_codon_lookup : $variant_id\n";
		    next;
		}
		my $ref_aa = $mrna->annotation->translate($ref_codon);
		my $var_codon = $ref_codon;
		substr($var_codon, $offset, 1, $mrna_variant_seq);
		my $var_aa = $mrna->annotation->translate($var_codon);
		my $effect;
		if ($ref_aa eq $var_aa) {
		    $effect = 'synonymous_codon';
		}
		elsif ($ref_aa eq '*') {
		    $effect = 'stop_lost';
		}
		elsif ($var_aa eq '*') {
		    $effect = 'stop_gained';
		}
		else {
		    $effect = 'non_synonymous_codon';
		}
		print join "\t", ($seqid,
				  $var_start,
				  $mrna_id,
				  $variant_id,
				  $reference_seq,
				  $variant_seq,
				  $ref_codon,
				  $var_codon,
				  $ref_aa,
				  $var_aa,
				  $effect,
				  );
		print "\n";
		print '';
	    }
	}
    }
}
