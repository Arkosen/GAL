#!/usr/bin/perl

use strict;
use warnings;
use Getopt::Long;
use GAL::Annotation;

#-----------------------------------------------------------------------------
#----------------------------------- MAIN ------------------------------------
#-----------------------------------------------------------------------------

my $usage = "

Synopsis:

splice_complexity feature.gff3

Description:

Print a list of genes and their splice complexity.

";

my ($help);

my $opt_success = GetOptions('help|h'            => \$help,
			      );

die $usage if $help || ! $opt_success;

my $feature_db = shift;

die $usage unless $feature_db;

my $text_file;
if (-T $feature_db) {
  $text_file = $feature_db;
  $feature_db =~ s/\.(gff3?|gvf)$//;
  $feature_db .= '.sqlite';
  # If DB is newer than text file
  if ((stat($feature_db))[9] > (stat($text_file))[9]) {
    $text_file = undef;
  }
}

# Making a hash of the arguments for the features
my %feat_store_args = (class    => 'SQLite',
		       database => $feature_db
		      );

# Lazy connect to the database for the features
my $feat_store = GAL::Annotation->new(storage => \%feat_store_args,
				     );

# Load files to DB if given as a text file.
if ($text_file) {
  $feat_store->parser(class => 'gff3');
  $feat_store->load_files(files => $text_file);
}

# Get a resultset.
my $features = $feat_store->schema->resultset('Feature');

# Define the search
my %feature_where = (type => 'gene');

# Do the search and get an interator for all matching features
my $genes = $features->search(\%feature_where);

# Iterate over the features
while (my $gene = $genes->next) {
  # Get the feature ID
  my $gene_id = $gene->feature_id;
  my $splc_cmplx = $gene->splice_complexity;
  print "$gene_id\t$splc_cmplx\n" if $splc_cmplx;
}
