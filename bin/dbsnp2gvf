#!/usr/bin/perl
use strict;
use warnings;
use Getopt::Long;

#-----------------------------------------------------------------------------
#----------------------------------- MAIN ------------------------------------
#-----------------------------------------------------------------------------
my $usage = "

Synopsis:

dbsnp2gvf --assembly reference ds_flat_ch1.flat > chr1_dbsnp.gvf

Description:

This script will convert dbSNP ASN1 flat file dumps to GVF relative to
a given assembly.

Options:

  assembly  One of reference, Celera, or HuRef. [reference]
  source    Name to use for the GVF source field. [dbSNP]
  fasta     A fasta file for the chromosome for use in determining
	    the reference sequence.

Note: Currently the script will only convert snp type records from
dbSNP because the other types of records get quite complex.  It also
doesn't distiguish reference allele from variant allele because so far
I've found no way to determine that from the ASN1_Flat records without
checking the reference sequence directly and I just haven't
implemented that yet.

";


my ($help, $selected_assembly, $source, @fasta);
my $opt_success = GetOptions('help'       => \$help,
			     'selected=s' => \$selected_assembly,
			     'source=s'   => \$source,
			     'fasta=s'    => \@fasta,
			    );

die $usage if $help || ! $opt_success;

$selected_assembly ||= 'reference';
$source            ||= 'dbSNP';

my @files = @ARGV;
die $usage if grep {! -e $_} @files;
die $usage if grep {! -e $_} @fasta;

$recordmy $fasta = parse_fasta(\@fasta);

for my $file (@files) {

	open (my $IN, '<', $file) or die "Can't open $file for reading\n$!\n";

	local $/ = "\n\n";

      RECORD:
	while (my $record = <$IN>) {

		my $variant = parse_record($record, $fasta);
		next RECORD unless $variant;

		my $seqid  = $variant->{seqid};
		my $type   = $variant->{type};
		my $start  = $variant->{chr_pos};
		my $end    = $variant->{chr_pos};
		my $score  = '.';
		my $strand = '+';
		my $phase  = '.';

		my $attributes = 'ID=' . $variant->{id} . ';';
		$attributes .= 'Variant_seq=';
		$attributes .= join ',', @{$variant->{alleles}};
		$attributes .= ';';
		$attributes .= 'Reference_seq=' . $variant->{ref_allele} . ';';

		print join "\t", ($seqid,
				  $source,
				  $type,
				  $start,
				  $end,
				  $score,
				  $strand,
				  $phase,
				  $attributes
				 );
		print "\n";
		print '';

	}
}

#-----------------------------------------------------------------------------
#-------------------------------- SUBROUTINES --------------------------------
#-----------------------------------------------------------------------------

sub parse_record {

	my ($record, $fasta) = @_;

	return undef unless $record =~ /^rs\d+\s+\|\s+/;

	my @lines = split /\n/, $record;

	my %variant;
      LINE:
	for my $line (@lines) {
		my ($class, @data) = split /\s+\|\s+/, $line;
		next LINE if $class =~ /^ss\d+$/;

		my @errors;
		if ($class eq 'CTG') {

			my ($assembly, $chr, $chr_pos, $ctg, $ctg_start, $ctg_end, $loctype, $orient) = @data;
			$assembly =~ s/assembly=//   or push @errors, 'assembly';
			next LINE unless $assembly eq $selected_assembly;
			$chr       =~ s/chr=//       or push @errors, 'chr';
			$chr_pos   =~ s/chr-pos=//   or push @errors, 'chr_pos';
			# Let's not deal with SNPs that don't have a known chromosome location;
			return undef unless $chr_pos =~ /^[0-9]+$/;
			$ctg_start =~ s/ctg-start=// or push @errors, 'ctg-start';
			$ctg_end   =~ s/ctg-end=//   or push @errors, 'ctg-end';
			$loctype   =~ s/loctype=//   or push @errors, 'loctype';
			$orient    =~ s/orient=//    or push @errors, 'orient';

			$variant{assembly}  = $assembly;
			$variant{chr}       = $chr;
			$variant{seqid}     = 'chr' . $chr;
			$variant{chr_pos}   = $chr_pos;
			$variant{ctg}       = $ctg;
			$variant{ctg_start} = $ctg_start;
			$variant{ctg_end}   = $ctg_end;
			$variant{loctype}   = $loctype;
			$variant{orient}    = $orient;

			# CTG | assembly=Celera | chr=1 | chr-pos=19193787 | NW_927841.1 | ctg-start=3670230 | ctg-end=3670230 | loctype=2 | orient=+
			# CTG | assembly=HuRef | chr=1 | chr-pos=19115539 | NW_001838573.1 | ctg-start=2491270 | ctg-end=2491270 | loctype=2 | orient=+
			# CTG | assembly=reference | chr=1 | chr-pos=20742048 | NT_004610.18 | ctg-start=3693803 | ctg-end=3693803 | loctype=2 | orient=+

		}
		elsif ($class eq 'LOC') {

			# I'm going to skip the LOC info for now - we do a better job of this with our own code.

			# LOC | KCNAB2 | locus_id=8514 | fxn-class=near-gene-3 | mrna_acc=NM_003636.2
			# LOC | KCNAB2 | locus_id=8514 | fxn-class=near-gene-3 | mrna_acc=NM_172130.1
			# LOC | TMED5 | locus_id=50999 | fxn-class=utr-3 | mrna_acc=NM_016040.3
			# LOC | TMEM51 | locus_id=55092 | fxn-class=utr-3 | mrna_acc=NM_018022.2
			# LOC | TMEM51 | locus_id=55092 | fxn-class=utr-3 | mrna_acc=NM_001136216.1
			# LOC | TMEM51 | locus_id=55092 | fxn-class=utr-3 | mrna_acc=NM_001136217.1
			# LOC | TMEM51 | locus_id=55092 | fxn-class=utr-3 | mrna_acc=NM_001136218.1
			# LOC | ATP2B4 | locus_id=493 | fxn-class=utr-3 | mrna_acc=NM_001001396.1

		}
		elsif ($class eq 'VAL') {

			# I'm going to skip the VAL info for now.

			# VAL | validated=YES | min_prob=? | max_prob=? | notwithdrawn | byFrequency
			# VAL | validated=NO | min_prob=? | max_prob=? | notwithdrawn
			# VAL | validated=YES | min_prob=? | max_prob=? | notwithdrawn | byHapMap
			# VAL | validated=YES | min_prob=? | max_prob=? | notwithdrawn | byCluster | by2Hit2Allele
			# VAL | validated=YES | min_prob=95 | max_prob=99 | notwithdrawn | byCluster | byFrequency | byOtherPop | by2Hit2Allele | byHapMap
		}
		elsif ($class eq 'SNP') {

			my ($allele_text, $het, $se_het) = @data;
			$allele_text =~ s/alleles=// or push @errors, 'alleles';
			$allele_text =~ s/\'//g;
			my @alleles = split /\//, $allele_text;
			$het     =~ s/het=//     or push @errors, 'het';
			$se_het  =~ s/se\(het\)=// or push @errors, 'se(het)';

			$variant{alleles} = \@alleles;
			$variant{het}     = $het;
			$variant{se_het}  = $se_het;

			# SNP | alleles='-/T' | het=0.18 | se(het)=0.24
			# SNP | alleles='-/T' | het=0.18 | se(het)=0.24
			# SNP | alleles='C/T' | het=? | se(het)=?
			# SNP | alleles='C/T' | het=0.2 | se(het)=0.2443
			# SNP | alleles='A/G' | het=0.39 | se(het)=0.2098
			# SNP | alleles='A/G' | het=0.3 | se(het)=0.2458
			# SNP | alleles='A/G' | het=0.01 | se(het)=0.0839

		}
		elsif ($class eq 'SEQ') {

			# I'm going to skip the SEQ info for now.

			# SEQ | 47271455 | source-db=remap | seq-pos=3818 | orient=-
			# SEQ | 8922276 | source-db=remap | seq-pos=1762 | orient=+
			# SEQ | 209977050 | source-db=remap | seq-pos=1763 | orient=+
			# SEQ | 209977051 | source-db=remap | seq-pos=1867 | orient=+
			# SEQ | 209977053 | source-db=remap | seq-pos=1794 | orient=+
			# SEQ | 209977055 | source-db=remap | seq-pos=1836 | orient=+

		}
		elsif ($class =~ /^rs\d+$/) {

			my ($id, $organism, $tax_id, $type, $genotype, $submit_link, $update) = ($class, @data);

			# We're only dealing with SNPs right now.
			return undef unless $type eq 'snp';

			$genotype    =~ s/genotype=//      or push @errors, 'genotype';
			$submit_link =~ s/submitterlink=// or push @errors, 'submit_link';
			$update      =~ s/updated //        or push @errors, 'update';

			$variant{id}          = $id;
			$variant{organism}    = $organism;
			$variant{tax_id}      = $tax_id;
			$variant{type}        = $type;
			$variant{genotype}    = $genotype;
			$variant{submit_link} = $submit_link;
			$variant{update}      = $update;

			# rs242 | human | 9606 | in-del | genotype=NO | submitterlink=YES | updated 2008-03-28 13:52

		}
		else {
			warn "ERROR: Bad line - unknown class: $line\n";
			return undef;
		}

		if (scalar @errors) {
			my $errors_text = join ', ', @errors;
			warn "ERROR: Bad data in $errors_text fields: $line\n";
			return undef;

		}
	}


	# Correct alleles given on minus strand
	map {tr/ACGTacgt/TGCAtgca/} @{$variant{alleles}} if ($variant{orient} eq '-');

	my $ref_allele = substr($fasta->{$variant{seqid}}, $variant{chr_pos} - 1, 1);
	unless (grep {$ref_allele eq $_} @{$variant{alleles}}) {
		warn "ERROR: Reference sequence doesn't match dbSNP alleles: " . $variant{id};
	}
	$variant{ref_allele} = $ref_allele;

	my %type_map = ('in-del'                       => 'sequence_variation',
			'microsatellite'	       => 'sequence_variation',
			'mixed'                        => 'sequence_variation',
			'multinucleotide-polymorphism' => 'sequence_variation',
			'named-locus'                  => 'sequence_variation',
			'snp'                          => 'SNV',
			'no-variation'                 => 'sequence_variation',
			'heterozygous'                 => 'sequence_variation',
		       );

	$variant{type} = $type_map{$variant{type}};

	return \%variant;

}

#-----------------------------------------------------------------------------

sub parse_fasta {

	my $files = shift;


	my %fasta;
	my ($id, $sequence);

	for my $file (@{$files}) {

		open (my $IN, '<', $file) or die "Can't open $file for reading\n$!\n";

		# Get to the first sequence and get it's ID
		while (my $line = <$IN>) {
			next unless $line =~ /^>/;
			($id) = $line =~ /^>(\S+)/;
			last;
		}

		while (my $line = <$IN>) {

			chomp $line;
			if ($line =~ /^>/) {
				$sequence =~ s/\s//g;
				$fasta{$id} = $sequence;
				($id) = $line =~ /^>(\S+)/;
			}
			$sequence .= $line;
		}
		$sequence =~ s/\s//g;
		$fasta{$id} = $sequence;
		$sequence = '';
		$id       = '';

	}
		return \%fasta;
}
